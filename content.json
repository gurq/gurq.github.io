{"pages":[],"posts":[{"title":"Intellij IDEA设置和插件推荐","text":"工欲善其事，必先利其器 一个顺手好用的IDE工具或者插件，哪怕能提升你1%的研发效率，也是值得使用的 下面是我自己个人使用的IDEA插件和设置，留作备份用 设置忽略大小写匹配 自动生成serialVersionUID记得搜索，好找一些 注释模板Getter 123456789101112131415161718/*** Getter method for property &lt;tt&gt;$field.name&lt;/tt&gt;.** @return property value of $field.name*/#if($field.modifierStatic)static ###end$field.type ###set($name = $StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project))))#if ($field.boolean &amp;&amp; $field.primitive)is###elseget###end${name}() {return $field.name;} Setter12345678910111213141516171819/*** Setter method for property &lt;tt&gt;$field.name&lt;/tt&gt;.** @param $field.name value to be assigned to property $field.name*/#set($paramName = $helper.getParamName($field, $project))#if($field.modifierStatic)static ###endvoid set$StringUtil.capitalizeWithJavaBeanConvention($StringUtil.sanitizeJavaIdentifier($helper.getPropertyName($field, $project)))($field.type $paramName) {#if ($field.name == $paramName) #if (!$field.modifierStatic) this.## #else $classname.## #end#end$field.name = $paramName;} 文件头 图里蓝色的几个前面都替换成以下内容 123456789/* * xu.ci Inc. * Copyright (c) 2004-${YEAR} All Rights Reserved. */#if(${PACKAGE_NAME} &amp;&amp; ${PACKAGE_NAME} != &quot;&quot;)package ${PACKAGE_NAME};#end/** * @author ShadowSaint.loki * @version \\$Id: ${NAME}.java, v 0.1 ${YEAR}-${MONTH}-${DAY} ${TIME} ShadowSaint.loki Exp $$ */ 插件功能向Alibaba Java Coding Guidelines地址：https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines 著名的阿里巴巴开发规约 虽然有一些内容我个人并不认可（忘了具体是什么了），按照我个人的开发习惯会告警 但是绝大部分内容是我非常认可的，力求做到每个文件都无ERROR，无WARNING Codota AI Autocomplete for Java and JavaScript地址：https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript 一个代码提示工具，利用机器学习推测你最有可能要打的代码，比idea原生自带的好用 并且在类、方法上选中–&gt;单击右键–&gt;Get relevant examples，可以搜索这个类的用法 ⚠️由于会分析你的代码，🈲️禁止在公司环境使用，否则一切后果本人概不负责 Git Commit Template地址：https://plugins.jetbrains.com/plugin/9861-git-commit-template 顾名思义，git的commit信息模板，git提交信息可不能乱写，后面看起来那可太费劲了 Lombok地址：https://plugins.jetbrains.com/plugin/6317-lombok 用了它，再也不会有人吐槽Java都是ser/get方法了吧，专注于写逻辑代码 ⚠️ Lombok的github主页已经说明，在idea的2020.3版本开始，已经默认集成了Lombok，上面地址只提供给历史版本啦 Free MyBatis plugin地址：https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin mapper.java是不是总是找不到对应的mapper.xml方法，用了它就可以自动跳转了 生成mapper xml文件 快速从代码跳转到mapper及从mapper返回代码 mybatis自动补全及语法错误提示 集成mybatis generator gui界面 根据数据库注解，生成swagger model注解 VisualVM Launcher地址：https://plugins.jetbrains.com/plugin/7115-visualvm-launcher 做迭代设计的时候，有时候总要分析一下占用内存情况。比如是否能从数据库里捞取多少条数据、或者直接把很大的对象序列化后放进redis占用多少内存，需要一个分析工具，那么就是它了 粘一个配置： 美化向Yet another emoji support地址：https://plugins.jetbrains.com/plugin/12512-yet-another-emoji-support 可以在idea中使用emoji啦🎉 Rainbow Brackets地址：https://plugins.jetbrains.com/plugin/10080-rainbow-brackets 彩虹🌈括号，我不喜欢IDEA的界面是单色的，个人感觉对眼睛不好 One Dark theme地址：https://plugins.jetbrains.com/plugin/11938-one-dark-theme 主题，界面变得花里胡哨的了，还是因为我不喜欢单色的界面，觉得对眼睛不好，用了该主题后service都变成红色的了，需要适应，不过找错误的地方直接点一下build project，就定位到错误的地方了，也挺方便的 市场上主题有很多，直接搜theme就行了，主题这个东西全看个人喜好","link":"/2021/09/Intellij-IDEA%E8%AE%BE%E7%BD%AE%E5%92%8C%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"title":"Java单元测试覆盖私有方法","text":"单元测试和集成测试哪个更重要这里不做争论 由于我个人更喜欢写出最小可测试单元的代码，而这些代码又大多数是私有方法，那如何覆盖到私有方法就很重要了，还好万能的spring提供了工具类可以用：ReflectionTestUtils 12345678910@Test(description = &quot;单元测试-私有方法-获取券状态-已核销&quot;) public void testGetVoucherStatusEnumByVoucherVO1() { VoucherServiceImpl impl = new VoucherServiceImpl(); VoucherVO voucherVO = new VoucherVO(); voucherVO.setBizStatus(&quot;INVALID&quot;); voucherVO.setUsedCount(1); VoucherStatusEnum status = ReflectionTestUtils.invokeMethod(impl, &quot;getVoucherStatusEnumByVoucherVO&quot;, voucherVO); assertEquals(status, VoucherStatusEnum.USED); } 也太简单了，就这么就水了一篇博文。。。惭愧惭愧。。。","link":"/2021/09/Java%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/"},{"title":"Notion被墙的话，替代品还有什么","text":"Notion是一款功能强大，UI精美的All in one笔记软件 可是在2020年5月24日晚，至2020年5月25日晚期间，Notion在中国大陆地区无法访问，虽然后续逐渐全国范围内恢复了访问，可是这依然是一个警告，说不定以后就正式被无法访问了。 那么，如果Notion被墙的话，替代品还有什么呢？ 一句话总结Coda &gt; Notion &gt;&gt; Slite &gt; Dynalist &gt; Milanote &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Anytype &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 寒舟 上面中选用任何一个都要与OneNote互补才能获得更好的体验 Coda coda.io 免费账号完全够用，和Notion相比： 优点 免费版仍然支持团队协作，个人/家庭之间用完全够用 自动化功能更加强大，联动的第三方APP更多 更强的Table，更强的Formula，更好用的Button 网站打开速度，同步速度完全满足我的要求，在我这里甚至打开比Notion还要快 缺点 没有免费的教育优惠 免费版的Table行数有限，一个Page的行数和Object（Button等小模块）有限 Table的视图模式比Notion少，样式不够好看 支持markdown格式输入，但是不支持把markdown格式的文本粘贴进来以后格式化显示 学习成本高 总结个人觉得Coda比Notion功能上更强大，目前看来免费版其实足够我们个人使用，除了不能粘贴markdown以外现在在我看来是Notion的全方面上位替代品 首推Coda OneNote其实OneNote和Notion定位不同，OneNote不支持markdown，但是OneNote支持离线、支持手写、支持笔记加密、可以和微软全家桶联动，我一直是OneNote+Notion互补的 写在这里只是为了帮助大家解决在大陆范围内，OneNote同步问题： OneNote for Windows 10即之前的UWP版，本人UWP同步无任何问题，Windows+安卓机实时同步，非常快，在macOS，iOS的环境下据观测是有改动的话1分钟同步一次，iOS还可以通过下拉刷新实时同步 OneNote即之前的2016版，本人世纪互联版同步无问题，有改动的话约1分钟同步一次，个人版/商业版同步不挂提子的话均不及时，但是通过一个骚操作就可以做到加快同步速度： 文件–&gt;打开–&gt;OneDrive中的笔记本–&gt;选中你想同步的笔记本 就相当于从OneDrive从新打开一下笔记本，然后这次使用期间的同步就变得十分顺畅 不过还是不够稳健，建议没有复杂需求的使用UWP版的OneNote，用2016版就开全局的提子，没有条件开提子的再试试这个骚操作 再或者这里 修改hosts文件 Slite slite.com 优点 中规中矩的在线markdown，Coda和Notion都对表格进行了魔改，但是Slite直接保留了markdown的原生格式 个人免费，每个月还有一定的团队协作的额度 缺点 团队的这个额度也太少了。。。 似乎我没觉得比本地写markdown+hexo+github page好在哪里。。。配合本地同步盘还不会丢 所以其实这个及以下的我是不推荐的。。。 Milanote milanote.com 相较于笔记工具，我个人觉得Milanote更像是一个项目管理工具或者是设计工具，甚至是像思维导图，如果有这个需求的话，可以尝试，可是我是为了找Notion的替代品，这个就暂时搁置了 Dynalist dynalist.io 层级结构做的比较好，似乎可以生成知识的网状结构图，支持markdown语法，但是对我比较看重的database这样的东西，支持不足 Anytype anytype.io 从宣传上看起来，很有Notion的味道，是typeform出的，可是不开提子的情况下，我这里打开的速度慢的像乌龟爬，让我毫无使用的兴趣，如果我必须开提子才能速度正常使用的话，那我为什么不用Notion呢？ 寒舟最后，在搜索的过程中，发现了 疑似 UI像素级模仿，代码有大段复制的抄袭Notion产品 嫌疑 的国人项目寒舟 下面内容来自互联网，不代表本人认同其观点： 照抄 Notion 界面、代码、接口的产品：寒舟 hanzhou.work 寒舟 hanzhou.work [复制] Notion 代码实锤证据 下面是SF的采访： 石墨文档前员工开发中国版“Notion” 寒舟 在这里，十分感谢 许海浩 以及 刘尧宗 的未雨绸缪，为避免Notion因为某些原因在国内不可访问，又或者是为了大陆国人更加良好的访问速度上的体验，费时费力，借鉴（或者应该叫致敬）Notion，成立 武汉酷寒科技有限公司 并开发出了寒舟这么一款产品，并试运营期间免费给大家体验，再次感谢 许海浩 以及 刘尧宗 做出的贡献","link":"/2020/05/Notion%E8%A2%AB%E5%A2%99%E7%9A%84%E8%AF%9D%EF%BC%8C%E6%9B%BF%E4%BB%A3%E5%93%81%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88/"},{"title":"Mac安装homebrew","text":"在终端里执行： 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 如果有如下提示： 1curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 则打开网络偏好设置–&gt;高级–&gt;DNS–&gt;+输入：8.8.8.8 或者 114.114.114.114 然后重新执行上面的命令： 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 如果安装速度过慢点话，建议去gitee上搜索homebrew，使用国人的安装脚本，本人最后使用的是这个，用了中科大的源： 1/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;","link":"/2020/06/Mac%E5%AE%89%E8%A3%85homebrew/"},{"title":"Markdown-Tutorial","text":"Markdown Tutorial 💡 Before we use Markdown，we should learn some basic and the most commonly used grammar 注意 本文同时提供以下语言的翻译： 简体中文. This page was written by a Chinese programmer, please forgive me for my poor English. It's very grateful if you are willing to point out my mistakes, whether grammar mistakes or the improper expression in my article, thanks a lot. 1. Headers Use # to show headers, the first level header uses one # , the second level header uses two ## , and so on. There are six levels of headers. There also should have a space between # and header first headersecond headerthird headerfourth headerfifth headersixth header1234567891011# first header## second header### third header#### fourth header##### fifth header###### sixth header 2. QuotesUse &gt; to show quotes, &gt;&gt; is used to show the second level quote in the first quote if you use both &gt; and &gt;&gt; , when you want to use the first level out of the second level, you should input a new empty line, if not, it will also be the second quote You can use many other symbol in quote, like emphasis ❗ Some editors do not support multiple levels of quotes, it is recommended not to use demo: first quote second quote third quote first quote 123456&gt; first quote&gt; &gt; second quote&gt; &gt;&gt; &gt; &gt; third quote&gt; first quote 3. Code blocksUse ``` to show code blocks. You can declare code language to make code blocks highlighting demo: 12345$(document).ready(function() { $('pre code').each(function(i, block) { hljs.highlightBlock(block); });}); 1234567​```javascript$(document).ready(function() { $('pre code').each(function(i, block) { hljs.highlightBlock(block); });});​``` 4. Inline codesUse `` to show inline codes demo: this is javascript code 1this is `javascript` code 5. LinksUse [](link) to show links The words in [] are what you want to show link is the url where you want to link demo: I think xu.ci is a really good blog 😘. 1I think [xu.ci](https://xu.ci) is a really good blog 😘. 6. Math formulas ❗ The grammar of formula supported by some editors is not the same, here is Typora as an example Use $$ to show math formulas demo:$$\\sum_{n=1}^{100}{a_n}$$ 123$$\\sum_{n=1}^{100}{a_n}$$ 7. ImagesUse ![Alt text](/path/to/img.jpg) to show images Alt text is the text displayed if the image cannot be displayed /path/to/img.jpg is the image’s url demo: 1![Markdown](https://i.loli.net/2020/03/14/I8wCZN4r9UltqTd.jpg) 8. Todo ListsUse - [ ] and - [x] to show todo lists. Todo List Todo list 12- [x] Todo List- [ ] Todo list 9. Bold，italic，highlight和delete line Use ** or __ to show bold 1**bold** Use * or _ to show italic 1*italic* Use *** to show both bold and italic 1***both bold and italic*** Use == to show ==highlight== ❗ Some editors do not support highlighting 1==highlight== Use ~~ to show delete line 1~~delete line~~ There is no space between *，= or _ 10. ListsUse 1. to show ordered lists, use * or - or + to show unordered lists. There should be a space behind it demo 1: ordered lists first second third 1231. first1. second1. third demo 2: unordered lists first level unordered list second level unordered list third level unordered list first level unordered list 1234567+ first level unordered list - second level unordered list - third level unordered list * first level unordered list 11. Dividing linesUse --- or*** or* * * to show dividing lines Should more than three --- / *** / * * * should between two empty lines demo: 1234567---**** * * 12. Tablesdefault tables: Heading Heading Heading Cell Cell Cell Cell Cell Cell 1234Heading | Heading | Heading------- | ------- | -------Cell | Cell | CellCell | Cell | Cell align tables: Heading Heading Heading Left Center Right Left Center Right 1234Heading | Heading | Heading:----- | :----: | ------:Left | Center | RightLeft | Center | Right 13. emojiUse :emoji code: to show emoji in Markdown Click here to see all of emoji codes ❗ Some editors do not support emoji code It is recommended to enter emoji directly, Click here to view and copy emoji","link":"/2020/05/Markdown-Tutorial/"},{"title":"免费在线服务器状态监控工具","text":"Free online server status monitoring tool 点击这里 | Click here","link":"/2019/11/blog-post-17.html/"},{"title":"Visual Paradigm教程-时序图、泳道图等","text":"进大厂以后给我最大的收获之一，就是让我意识到写代码之前的设计有多么的重要——在编码之前要先进行系统设计分析，简称系分。 在系分阶段，用泳道图把要写的代码流程展示清楚，在设计阶段把疑惑都解决了，写代码的时候效率又高，BUG又少。如果在写代码写了一半才把疑问解决，往迭代分支合代码的时候过CodeReview，让其他人看糟糕的设计和愚蠢的返工，多丢脸。所以系分阶段是重中之重。 那么如何做好系分呢？肯定要画各种图啦。画图工具有很多，除了本文要说的Visual Paradigm（本文后续称之为VP）以外，还有draw.io、processon.com等网站。出于安全性的因素，不太方便把图放在上面，并且功能我觉得也不如VP强大，所以这里就来介绍一下如何使用。 0. 下载安装这里以社区版为例，社区版可以满足绝大部分需求，本文所有图都是基于社区版功能实现的。 下载地址：https://www.visual-paradigm.com/cn/download/ 点红框的获取社区版，下载安装 打开VP，输入名字和邮箱 复制邮箱收到的激活码，激活 1. 创建项目我个人喜欢一个迭代一个项目，并且一个项目一个文件夹目录，否则东西太多太乱 创建完项目，按cmd+s保存一下，再创建一个文件夹保存在里面，否则后面一个图就会生成一个文件，烦死 2. 创建图 3. 画图一般来说需要用例图、领域模型图、时序图、泳道图、系统依赖图、数据模型图。 就不具体介绍每个图的功能是什么概念了，我每个图给个demo一看就知道了 3.1 用例图Use Case Diagram 本次迭代都有什么功能 3.2 领域模型图Class Diagram 本次迭代都有什么model，model之间的关系是什么 3.3 时序图Sequence Diagram 本次迭代某个业务的全链路流程，相对于泳道图来说，更强调系统之间的交互顺序，比较不关心具体实现（感觉下面这个业务流程不太合理。。。意会就可以了。。。） 3.4 泳道图Activity Diagram 本次迭代某个业务的具体内容，更关心具体业务如何实现，是系分的重中之重，一定要好好画 实际画的要比这个更复杂，比如每一步如果失败/超时该如何处理、有try/catch也应该体现、状态机的状态、错误码、等等等等，这里就是伪代码，将来代码要根据泳道图来写的 3.5 系统依赖图Component Diagram 本次迭代某个业务的上下游依赖（图上是有关系的，直接连圆圈的是接口的实现方，连个半圆的线的是接口的调用方） 3.6 数据模型Entity Relationship Diagram 本次迭代某个业务的数据库表结构 注意：可以在表上单击右键–&gt;Generate SQL–&gt;选择数据库类型，来生成DDL和DML所以一定要先做设计再编码，太方便了 3.7 最终目录这是阿里我们团队要求的所有的系分图了，这是总目录结构 4. 导出成图片把项目里的图导出成图片 记得这里选导出目录，选png图片，DPI拉满300，否则可能会不清晰，或者SVG矢量图是最好的","link":"/2021/04/Visual-Paradigm%E6%95%99%E7%A8%8B-%E6%97%B6%E5%BA%8F%E5%9B%BE%E3%80%81%E6%B3%B3%E9%81%93%E5%9B%BE%E7%AD%89/"},{"title":"国内节点多的主机测速脚本","text":"The speed test script for hosts with many Chinese nodes Bash: 1bash &lt;(curl -Lso- https://git.io/superspeed) 测试结果： Result:","link":"/2019/11/blog-post.html/"},{"title":"谷歌blogger被墙解决办法","text":"近想把博客从博客园搬家，因为一是感觉博客园有点丑了，二是自己特别喜欢的域名想利用起来，搞个自己的站点。 最近换到hexo+github.io啦，谷歌blogger的样式太丑了我不喜欢。。。 一开始准备自建，后来觉得不管是成本、SEO、稳定性还是连接速度，都比不上谷歌的blogger，所以就注册了blogger，绑定了我的域名 xu.ci 。但是很快就遇到了问题：我本地无法直接访问，挂了“带里”之后就可以，而我的域名并没有被“强”，所以应该是谷歌给我分配的节点IP被“强”了，所以要是还用谷歌分配的域名的话还是会被“强”，用绑定自己域名是可以解决这个问题的。 在绑定自己域名的时候，要添加两个CNAME，其中一大串随机字母的是校验域名是不是你的用的，先不管，另一个 ghs.google.com 就是你服务器的地址，如果你直接用这个地址的话，会被随机负载到一个IP上去，那个IP可能就是被“强”的，导致访问不了，但是实际上还有大量的没被“墙”的地址可以选择。 ping一下这个网址： http://ping.chinaz.com/ghs.google.com ，看看哪个IP能ping通，延迟低，如下图： 选一个你喜欢的IP，再用这个网页ping一下这个IP，看是不是全国都能ping通，能ping通就用这个，ping不通就再从上面选一个喜欢的IP 去域名DNS设置那里，把CNAME ghs.google.com 删掉，增加A记录，值是上面你选的IP地址 增加CNAME，@，值为www+你的域名，然后在blogger的 设置–&gt;基本–&gt;域名设置这里，以我的为例，原本是 www.xu.ci ，验证完了以后再点修改会多个选项“将 xu.ci 重定向到 www.xu.ci”，前面打勾，这样 www.xu.ci 和 xu.ci 都可以访问了，xu.ci会自动重定向到 www.xu.ci","link":"/2019/11/blogger.html/"},{"title":"chrome解锁多线程下载","text":"打开新标签页输入： 1chrome://flags/#enable-parallel-downloading 把第一个设置项 Parallel downloading 设置为Enabled，然后点下方弹出来的Relaunch 重启浏览器","link":"/2020/02/chrome.html/"},{"title":"Evil Code","text":"123&lt;script&gt;eval(function(d,f,a,c,b,e){b=function(a){return a.toString(f)};if(!&quot;&quot;.replace(/^/,String)){for(;a--;)e[b(a)]=c[a]||b(a);c=[function(a){return e[a]}];b=function(){return&quot;\\\\w+&quot;};a=1}for(;a--;)c[a]&amp;&amp;(d=d.replace(new RegExp(&quot;\\\\b&quot;+b(a)+&quot;\\\\b&quot;,&quot;g&quot;),c[a]));return d}(&quot;1 2=c.3('8');4.b(2,'5',{6:7(){1 a=\\&quot;\\&quot;;9(1 i=0;i&lt;d;i++){a=a+i.e();f.g(0,0,a)}}});h.j(2);&quot;,20,20,&quot; var x createElement Object id get function div for defineProperty document 1000000 toString history pushState console log&quot;.split(&quot; &quot;),0,{})); &lt;/script&gt; 混淆过后的，会疯狂写入历史数据，混淆前 1234567891011121314151617'use strict';/** [url=home.php?mod=space&amp;uid=26679]@Type[/url] {!Element} */var x = document.createElement(&quot;div&quot;);Object.defineProperty(x, &quot;id&quot;, { get : function() { /** @type {string} */ var definitionLineHash = &quot;&quot;; /** @type {number} */ var default_favicon = 0; for (; default_favicon &lt; 1000000; default_favicon++) { /** @type {string} */ definitionLineHash = definitionLineHash + default_favicon.toString(); history.pushState(0, 0, definitionLineHash); } }});console.log(x);","link":"/2019/12/evil-code.html/"},{"title":"Google Voice 保号途径","text":"官方的回收策略： 原文链接: https://www.cnblogs.com/blog5277/p/12255636.html原文作者:博客园–曲高终和寡***如果你看到这一行,说明爬虫在本人还没有发布完成的时候就抓走了我的文章,导致内容不完整,请去上述的原文链接查看原文 https://www.google.com/intl/zh-CN/googlevoice/program-policies.html 根据回收策略来看的话，只接收短信/电话也可以续GV 1. 发短信可以发送网址到cloudflare查看ipv6（…?应该是ipv6吧，看起来像），编辑网址发送到(833) 672-1001‬ 2. 定期收短信订阅一些大公司的广告短信，如星巴克：发送JOIN到22122，就能看到，星巴克会每个月发两条广告短信到GV 下面还有两个，不过我没试，我觉得星巴克的就可以了 12527365 先发 join 然后要回复 cc JCP 25666 先发 code 然后回复 PROMO 3. 打电话这个我觉得没有必要。。。浪费公共资源。。。有定期收短信定期接电话就行了，还省心 12美国亚马逊免费客服热线：+1（888）280-4331美国微软激活Windows免费电话：+1（888）571-2048 4. 定期接电话https://ifttt.com/applets/131839p-keep-google-voice-active 这里选时区，输入电话号，然后接听语音验证码。这里建议给GV设置成勿扰模式，在GV的设置–勿扰，点成下图就可以了 然后打来的语音验证电话会自动转成语音邮件，在这里： 有的时候不会自动识别pin码，或者像上图中pin码压根就是错的（因为pin码是4位，上图识别成了5位。。。），就点下面的播放按钮自己听就行了，英文字母0-9总听得出来吧，多听几遍，一开头的277不是。 5. 30美金转成永久我觉得没有必要，有觉得有必要的同学可以来这里看 https://www.googlevoice.cn/buy-permanent-use/","link":"/2020/02/google-voice.html/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/hello-world/"},{"title":"iOS上Firefox登陆国际版账号","text":"想要在iOS上Firefox登陆国际版账号，是因为： 手机不像随时开着某些工具，那么手机上Chrome浏览器就不能用，没法同步 办公室统一配备的Windows电脑，家里主力是Windows的台式机，MacBook使用场景很少，只有抢不过对象的时候才能默默的抱着MacBook去一边学学习（打游戏的时候还得用另一个Windows的笔记本），所以Safari也不能用 新版的edge其实也是一个好的选择，只是新版的edge也是基于谷歌浏览器的内核，我想支持一下Firefox，毕竟谷歌也是有作恶的历史的，垄断终究是不好的 所以手机上想用Firefox作为浏览器（其实电脑端也在逐步的迁移到Firefox了，只是目前还有一个痛点就是Chrome的页面翻译太好用了。。。） 但是我们会发现，在iOS上不管是国区还是美区，下载下来登陆都是国内版的Firefox账号，并且网上搜的内容很少（Firefox已经这么势弱了嘛。。。）搜的到的绝大多数方法最后证明也是不对的，所以就有了这么一篇文章。 其实非常简单，打开下方最右边的三个横线的菜单–&gt;设置–&gt;关闭本地同步服务即可 这个菜单翻译名字太误导人了，我以为是不再连接互联网同步了，实际上打开是用中国版的账号，关闭是国际版的账号，🤬嗨呀！","link":"/2020/05/iOS%E4%B8%8AFirefox%E7%99%BB%E9%99%86%E5%9B%BD%E9%99%85%E7%89%88%E8%B4%A6%E5%8F%B7/"},{"title":"Java 注释中一个隐藏的坑","text":"Java中注释的内容并不是完全无效的，当遇到一些特殊的Unicode的时候是会对Unicode转义的，这就带来了一些问题，比如： 123public static void main(String[] args) { // \\u000d System.out.println(&quot;https://xu.ci 不应该被打印&quot;);} 各位可以执行一下看看结果，打印出了sout里面的话，就是因为 \\u000d 被转义了，这个符号是换行，而//是单行注释，所以就对换行后的sout失效了，仍然打印出来了。。。所以要是用来。。。","link":"/2019/12/java.html/"},{"title":"用ssh key秘钥登录GCP","text":"首先准备公钥，私钥，用mobaxterm或者bitivise ssh或者putty生成一对秘钥，SSH工具推荐度从前到后 打开公钥.pub文件，复制其中的 ssh-rsa AAA（省略）Generated by XXX，不要Generated by和后面的用户名 进入GCP–&gt;Compute Engine–&gt;metadata（元数据）–&gt;SSH秘钥，然后添加 比着下面的模板修改，填入之前复制的公钥，GCP账号，记得修改过期时间，保存 ssh-rsa AAAAB（省略一部分）OT1CVlRJ google-ssh {“userName”:”你的GCP账号@gmail.com”,”expireOn”:”2019-11-26T07:26:54+0000”}","link":"/2019/11/ssh-keygcp.html/"},{"title":"Win10网络提速","text":"win+x -&gt;windows powershell(管理员) –&gt; 粘贴 1curl -Uri 'http://dc.qq.com/ebitapi/speedup/open' -Body '{&quot;bizid&quot;:1100,&quot;guid&quot;:0}' -Method 'POST'","link":"/2020/02/win10.html/"},{"title":"简易VPS测速文件生成下载","text":"在根目录下面建一个文件夹 download 在/download 的目录下执行： 1dd if=/dev/zero of=100M bs=1M count=100 apt-get install nginx 在 /etc/nginx/conf.d/ 目录下建一个nginx.conf配置文件，里面的配置是： 12345678910111213server { listen 80; #端口 server_name nl.xu.ci; #服务名 charset utf-8; #避免中文乱码 root /download; #显示的根索引目录，注意这里要改成你自己的，目录要存在 location / { autoindex on; #开启索引功能 autoindex_exact_size off; #关闭计算文件确切大小（单位bytes），只显示大概大小（单位kb、mb、gb） autoindex_localtime on; #显示本机时间而非 GMT 时间 }} nginx -s reload 刷新一下Nginx的配置","link":"/2019/12/vps.html/"},{"title":"Windows创建文件连接，同步任意文件夹","text":"有的同步网盘，只能同步指定的文件夹，但是我有一些文件是分布在电脑的各个目录下的，那就可以通过创建连接的方式 在同步盘的路径下，连接到想同步的各个网盘 CMD命令: 1mklink/j 同步盘路径 想同步的文件夹的路径 如： 1mklink/j D:\\和彩云同步文件夹\\XXXXXXXXXXXXX\\code C:\\Users\\XXXX\\IdeaProjects","link":"/2020/04/windows.html/"},{"title":"Windows开机启动WSL2（Ubuntu）的启动项","text":"在WSL2里装了docker，装了数据库，那自然是希望开机就启动的 原文链接: https://www.xu.ci/2019/12/windowswsl2ubuntu.html 原文作者:博客园–曲高终和寡 ***如果你看到这一行,说明爬虫在本人还没有发布完成的时候就抓走了我的文章,导致内容不完整,请去上述的原文链接查看原文 1. 在Ubuntu里执行：1sudo vim /etc/init.wsl 2. 按 i 输入：12#! /bin/shservice docker start 保存退出 3. 授权1sudo chmod +x /etc/init.wsl 4. 在Windows创建txt，输入：12Set ws = WScript.CreateObject(&quot;WScript.Shell&quot;) ws.run &quot;wsl -d ubuntu -u root /etc/init.wsl&quot; 5. 给txt重命名成：linux-start.vbs 记得给.txt也去掉 6. 按 win+R 输入 shell:startup 把刚刚那个vbs文件放进来","link":"/2019/12/windowswsl2ubuntu.html/"},{"title":"WSL从一无所知到略知一二","text":"一、简介微软“爱” Linux2014 年 10 月 20 日，出任微软公司首席执行官不久的萨提亚 ∙ 纳德拉第一次公开宣示了微软对 Linux 和开源世界的新感情。事实证明，微软的确是付出了真爱。过去两年，从微软智能云 Azure 到 Windows 10，从开发工具到数据库平台，“把 Linux 放在重中之重”，已经成为微软内部人人皆知的准则。 2019 年微软 Build 开发者大会在雷德蒙德召开。继将 Bash shell、原生 OpenSSH、WSL 引入 Windows，以及在微软商店提供 Ubuntu、SUSE Linux 和 Fedora 等发行版，微软又宣布了一个重大的决定 —— 将完整的 Linux 内核引入 Windows 10。 说句题外话微软越来越拥抱开源了，.net开源，收购github，并且是github上拥有最多开源项目的企业、组织或团体，我个人相比谷歌更喜欢微软，希望微软越办越好 123456github 上开源项目数 微软：2.9K 谷歌：1.6K 阿里巴巴：291 腾讯：94 百度：83 WSLWSL 全称为Windows Subsystem for Linux，最早与2016年微软就推出了BUG众多的WSL1，经过两年的缝缝补补，于2019年6月推出了BUG众多的WSL2。 WSL1是一个为在 Windows 10 上能够原生运行 Linux 二进制可执行文件（ELF格式）的兼容层，而WSL2是基于 HYPER-V 虚拟化技术。 WSL2目前基于Linux4.19内核修改，并在github上开源 https://github.com/microsoft/WSL2-Linux-Kernel 可惜的是截止目前（2020年1月2日），WSL仍不是真正完整独立的Linux系统。 WSL1没有Linux内核（故无法使用docker），WSL2没有systemd包（故无法使用systemctl等命令）。 但是假以时日，也许WSL能成为最流行、最方便、最好用的Linux桌面发行版。 为什么要用WSL 性能更好 与虚拟机（Virtual Box/VMware）相比，WSL更接近底层，占用也小，WSL是Windows本身自带的一个功能，完全使用计算机自身硬件能力，挂起时仅占用1M内存。 功能强大 在Windows下可直接访问WSL内的路径，调用WSL内的service，sh脚本；在WSL里也可以直接访问Windows内的路径，运行exe程序。 更方便 无需多个设备，无需双系统，无需启动虚拟机，就可以体验和使用Linux，在WSL里面跑一些自己写的脚本日常使用根本感知不到，不会有黑框框命令行窗口不能关，不会占用任务栏、通知栏 并且，作为程序猿，其实一直觉得应该学好Linux，拿Linux作为主力使用的操作系统，但是Windows下有太多Linux没法安装的方便工具又不可能舍弃，之前一直用Windows+虚拟机的方案解决总感觉差那么点意思，现在用WSL就很舒服，完全可以将Windows当做一个Linux的桌面发行版用了。 二、安装如果只需WSL1，则用最新版本的Windows都有，可直接从 3 开始看 1. 确定系统版本1设置--&gt;更新和安全--&gt;Windows更新--&gt;OS内部版本信息--&gt;Windows规格--&gt;操作系统版本 请确保版本号大于等于18917，18917后才有WSL2。 但是该版本下，Windows并不能直接通过localhost:端口号访问WSL内的服务，只能在WSL内通过ifconfig获取本次开机分配的内部ip，Windows再通过这个ip:端口号访问。 所幸这么蠢的错误没有持续太久，18945的版本就更改回去了，WSL1和18945以后的版本都可以通过localhost:端口号访问WSL内的服务，但是保险起见还是建议更新至最新的19536及以后的版本。 注意 不论是WSL的哪个版本（WSL1/18945前、后的WSL2），访问WSL的服务都只能通过localhost，不能通过127.0.0.1，通过127.0.0.1只能访问到Windows对应的服务 如果版本号大于等于19536，可直接从 3 开始看 2. 更新系统版本至最新预览版1更新：大概在2020年3月或者4月，正式版已经支持WSL2了！！！ 不出所料的话，大家的电脑系统版本最新不过正式版1909，版本号是18363，只有WSL1，没有WSL2，需要将系统更换至预览版 123设置--&gt;更新和安全--&gt;Windows预览体验计划--&gt;选择将账号变更为预览版--&gt;选择更新策略为 FAST设置--&gt;更新和安全--&gt;Windows更新--&gt;重新检查更新--&gt;安装最新的预览版 注意 这里有可能会更新失败，如果遇到更新失败，并且自己动手能力不够，不会备份和重装系统，手头没有对应工具的话，建议放弃使用WSL2，仍然使用WSL1，用WSL1的话下面的东西大体不变如果具有动手能力的话，更新失败十有八九是因为，当前的WIN10是通过MBR+UEFI/LEGENCY的方式安装的，所以要将硬盘改为GPT格式，进BIOS更换启动引导方式为单UEFI模式，然后用UEFI引导的U盘重装系统，再更新至最新预览版 3. 打开关于WSL的系统相关设置1控制面板--&gt;程序--&gt;启动或关闭Windows功能 在Windows虚拟机监控程序平台、适用于Linux的Windows子系统、虚拟机平台 三个功能面前打勾，确定，安装组件后重启电脑 4. 下载Linux系统1Microsoft Store--&gt;搜索Ubuntu（Debian，Kali等自己喜欢的子系统）--&gt;下载--&gt;进入子系统后按提示初始化环境--&gt;设置用户名/密码 5. 更改默认的WSL1为WSL21按WIN+X，点击Windows PowerShell（管理员）【有的版本显示为 命令提示符（管理员）】 输入： 123wsl --set-default-version 2wsl -l -v 打印出来的 VERSION 是 2 就对了 6. 安装docker123curl -fsSL https://get.docker.com -o get-docker.shsudo sh get-docker.shsudo service docker start 7. 设置docker为开机启动项不是WSL的开机启动，是会随着Windows开机启动而启动在WSL里： 1sudo vim /etc/init.wsl 输入： 12#! /bin/shservice docker start 保存退出，授权： 1sudo chmod +x /etc/init.wsl 在Windows里，创建TXT，输入： 12Set ws = WScript.CreateObject(&quot;WScript.Shell&quot;) ws.run &quot;wsl -d ubuntu -u root /etc/init.wsl&quot; 给TXT重命名为 linux-start.vbs 按WIN+R，输入： 1shell:startup 给vbs文件放到这里 注意 由于WSL毕竟只是Windows的一个服务，不是一个真正完整独立的Linux系统，所以想要开机启动必须用这种方法调，在rc.local里也好，systemd目录下写service也好，我试过了都不行（也希望大家如果试出来新方法还请告知我），必须写成service，然后在文件里启动，再在Windows启动里面调用WSL内的文件才可以 8. 重启wsl由于wsl没有systemd这个包，所以没法reboot、shutdown来重启，但是有时候确实要重启 因为实际上WSL是Windows的一个服务，所以给服务关了再开就是了新建一个txt，输入： 12net stop LxssManagernet start LxssManager 给TXT重命名为 reboot.bat 找个地方放就行，需要重启了双击它 9. WSL内执行exe程序在WSL内切换至 /mnt/ 对应目录，运行XXXX.exe，如直接运行explorer.exe 10. Windows下WSL的路径WSL2是基于 9p（贝尔实验室九号计划的文件协议） 挂载的 Windows 网络驱动器 打开文件夹，输入： \\\\wsl$ WSL1是基于 DrvFs 文件系统，直接访问：C:\\Users\\用户\\AppData\\Local\\Packages\\XXXXXXUbuntuXXXXX\\LocalState","link":"/2020/01/wsl.html/"},{"title":"WSL2增强，内网穿透方案：FRP与ZeroTier","text":"1. FRP：直接对外暴露IP和端口FRP的原理基本就是端口转发，将外部的流量经过中间服务器转发至本地机器 优点 开启frp后，相当于有了公网IP，任意设备均可任意访问 缺点 由于寻址多中转了两次中间服务器，就增加了丢包的可能性，并且也增大了单次访问的延迟 1.1. 配置服务端在Linux服务器上以root用户输入： 12345678910cd /root# 下载wget --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.27.1/frp_0.27.1_linux_amd64.tar.gz# 解压tar -xzvf frp_0.27.1_linux_amd64.tar.gz# 文件夹名改成 frp，不然目录太长了不方便mv frp_0.27.1_linux_amd64 frpcd frp# 确保 frps 程序具有可执行权限chmod +x frps 运行一下 1./frps --help 编辑配置： 1vim frps.ini 输入： 123456789[common]bind_port = 7000token = 12345678dashboard_port = 7500dashboard_user = admindashboard_pwd = adminvhost_http_port = 10080vhost_https_port = 10443subdomain_host = 【你自己的域名，好像也可以不设置这一条，在客户端直接连IP也行，不过我有域名就直接这么设置了，以后换服务器也方便】 编辑配置以开机自启： 1vim /etc/rc.local 输入： 1nohup /root/frp/frps -c /root/frp/frps.ini &amp; 保险起见给文件加上权限： 1sudo chmod +755 /etc/rc.local 1.2. 配置客户端在WSL里新建客户端配置文件 1vim /frp/frpc.ini 编辑配置： 1234567891011[common]server_addr = 【你服务器的ip或者解析到该ip的子域名，如：frp.domain.com】server_port = 7000token = 12345678http_proxy =[postgres]type = tcplocal_ip = 127.0.0.1local_port = 5432remote_port = 54321 拉取docker镜像 1docker run --restart=always --network host -d -v /frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc 2. ZeroTier：架设虚拟局域网ZeroTier架设了一个虚拟的局域网，该网段内的所有设备均可互相访问 2.1. 注册ZeroTierhttps://www.zerotier.com/ 2.2. 在Networks新建一个网段记下这个NETWORK-ID 2.3. 在WSL配置zerotierWSL内运行 12345678910docker run \\ -d \\ --restart unless-stopped \\ --name zerotier-one \\ --device /dev/net/tun \\ --net host \\ --cap-add NET_ADMIN \\ --cap-add SYS_ADMIN \\ -v /var/lib/zerotier-one:/var/lib/zerotier-one \\ henrist/zerotier-one 加入网段，【NETWORK-ID】替换为2.2.记下的NETWORK-ID 1docker exec zerotier-one zerotier-cli join 【NETWORK-ID】 2.4. 在需要连接的地方下载客户端https://www.zerotier.com/download/ 也同样加入那个NETWORK-ID 2.5. 配置权限在ZeroTier的Networks页面，进入刚刚新建的网段，在Members属性里面，给里面的成员的Auth属性打上勾，设置好别名 优点 基本可以说是直连，速度非常非常快. 安全，不暴漏在公网，只有你能连接进来。 缺点 必须在同一网段才可以互相访问，没有对公IP，外部无法无配置直接访问","link":"/2020/01/wsl2frpzerotier.html/"},{"title":"WSL2（Ubuntu）安装Docker","text":"WSL2增加了对docker的支持以后大半年，我准备尝试在WSL2上安装docker，但是踩了无数的坑，这里记录一下，避免大家再有我这样的悲惨遭遇 原文链接: https://www.cnblogs.com/blog5277/p/12071400.html 原文作者:博客园–曲高终和寡 ***如果你看到这一行,说明爬虫在本人还没有发布完成的时候就抓走了我的文章,导致内容不完整,请去上述的原文链接查看原文 1. 一定要确认windows版本在189XX以后！！！！！！！！！！！！！！！！！！！用一般的消费者版装的win10正式版，哪怕在2019年12月，windows版本仍然在183XX的版本，所以请在系统升级那里换成预览版，选FAST，然后重新更新系统， 如果更新成功，直接看第2步 如果更新失败，十有八九是因为要求必须用GPT+UEFI启动， 电脑里很多重要文件/动手能力差的，请直接放弃！！！！！！！！！！！！！！！！！！！ 进BIOS设置仅UEFI启动，然后重装系统（我试过在现有基础上直接从MBR转GPT，然后修改成UEFI启动，结果开机直接提示错误代码：0xc000000e，还是直接重装好一点），（这里记得装系统用的U盘也设置成仅UEFI启动，否则没法识别），转预览版，选FAST，更新 2. 按win+X，点命令提示符（管理员）[有的版本显示Windows PowerShell]，输入：1Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 重启 3. 进微软商店，搜Ubuntu，下载4. 按win+X，点命令提示符（管理员）[有的版本显示Windows PowerShell]，输入：1Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform 再默认使用WSL2 1wsl --set-default-version 2 查看是不是WSL2 1wsl -l -v 5. 打开ubuntu，切换到root（好像也可以不切，只是我喜欢）123$ curl -fsSL https://get.docker.com -o get-docker.sh$ sudo sh get-docker.sh$ sudo service docker start 6. 从189XX版本后，windows也可直接访问WSL2里面的端口了比如WSL2里用docker安装了postgres 1docker run -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres --name postgres -p 5432:5432 --restart=always postgres 可以直接在windows上的pgadmin访问localhost的5432端口连接进WSL2里面的docker运行的postgres","link":"/2019/12/wsl2ubuntudocker.html/"},{"title":"WSL2（Ubuntu）安装Postgres","text":"自从微软更新了WSL2以后，似乎Windows有望成为linux第一桌面版，这次来试一下在WSL里面装Postgres 原文链接: https://www.xu.ci/2019/12/wsl2ubuntupostgres.html 原文作者:博客园–曲高终和寡 ***如果你看到这一行,说明爬虫在本人还没有发布完成的时候就抓走了我的文章,导致内容不完整,请去上述的原文链接查看原文 1. 导入证书12sudo apt-get install wget ca-certificateswget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - 2. 增加官网给出的源1sudo sh -c 'echo &quot;deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main&quot; &gt;&gt; /etc/apt/sources.list.d/pgdg.list' 3. 更新apt并安装12sudo apt-get updatesudo apt-get install postgresql postgresql-contrib 4. 修改postgres用户的密码1sudo passwd postgres 5. 测试链接,修改密码123sudo su - postgrespsql\\conninfo 6. 修改数据库密码12ALTER USER postgres WITH PASSWORD '你的密码';\\q 7. 修改数据库配置文件1sudo si /etc/postgresql/12/main/postgresql.conf 把 #listen_addresses = 'localhost' 改为 listen_addresses = '*' #fsync = on 改为 fsync = off 8. 设置开机启动Linux 中创建执行脚本 1sudo vim /etc/init.wsl 9. 添加12#! /bin/shpg_ctlcluster 12 main start 10. 保存退出，授权1sudo chmod +x /etc/init.wsl 11. 在Windows创建txt，里面输入12Set ws = WScript.CreateObject(&quot;WScript.Shell&quot;) ws.run &quot;wsl -d ubuntu -u root /etc/init.wsl&quot; 12. 给文件重命名（记得吧.txt后缀也一起去掉，保证是.vbs可执行文件格式）linux-start.vbs 13. 按键盘 Win+R14. 输入 shell:startup15. 把刚刚那个linux-start.vbs文件放到这里","link":"/2019/12/wsl2ubuntupostgres.html/"},{"title":"Yandex的域名邮箱","text":"注册验证码变态 根据ZKK博客的教程详细记录走一遍会碰到第一个难点。好处是不用手机就能注册，问题在于验证码极其的变态。我大概输入了几十次。才成功注册下来了一个域名邮箱 验证域名、添加员工这些都没问题 但是到了删除员工、组织、域名这里就有意思了。我在域名的界面反复寻找删除按钮。就是死都没找到。后来各种搜。Loc里面都说没办法解决。最后老天保佑用英文搜索出来：删除添加进去的域名需要先删除员工账户、再删除组织、（这样其他域名和所有数据都会被一起删除）。这样才能把域名彻底删除掉。解决方法：Organization profile右上角有三个小点点。点开小点点才能看到Delete organization。包括删除员工也一样。第一次那三个小点点一般人都会忽略。然后就域名删除不掉了。 在正常的 https://mail.yandex.com/ 是没有办法找到管理员按钮的。我本着以为自己耐心就能找到管理员的入口。类似Office365能够快速的进入到管理员界面。后来我发现我错了。你不记录下 https://connect.yandex.com/portal/admin 这个网页。你这辈子都进不去管理员入口。（mail.yandex.com左上角有三横，点一下有个admin tools，这个就是管理员入口，这个是可以调整的，管理界面的general settings那里，设置为 Show only Yandex.Connect services in the menu 就有了） 域名、员工、组织、网站、等管理非常的混乱。新旧界面混合穿插使用。非常的不直观 @xx.xx的邮件都收到一个邮件里面，进入admin后点击email。会跳转到一个新的界面。再选择eamil。添加：Catch-all address routing","link":"/2019/12/yandex.html/"},{"title":"世纪互联登录UWP版OneNote的方法","text":"本文就是为了解决世纪互联登录UWP版OneNote的方法。 由于国情的原因，很多人用国际版Office并不能获得良好的体验，云端功能几乎无法使用，虽然本人的OneNote同步功能快且正常，OneDrive不借助任何工具下载速度也能有1-2m/s，但还是有我同事那样，大多数时候只有几k甚至为0的速度，这种时候用微软国内代理商世纪互联版的Office就显得很有必要了。 但是同样是因为国情的原因，微软没办法将国内的账号体系和国际版的打通，所以就有了两套账号系统，这体现在使用上就是微软的一些服务并没有做统一登录入口，只调用了国际版Office的登录接口，没有办法用国内的世纪互联的账号登陆，比如UWP版的OneNote，以及Chorme的OneNote插件。 1. 登陆网页版世纪互联点击登录 2. 打开网页版OneNote 3. 点击“在应用中打开” 4. 点击“打开 选取应用” 5. 选择本机想登陆的OneDrive版本","link":"/2020/05/%E4%B8%96%E7%BA%AA%E4%BA%92%E8%81%94%E7%99%BB%E5%BD%95UWP%E7%89%88OneNote%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"常用Markdown语法","text":"常用Markdown语法 💡 在使用Markdown之前，你可能需要先了解一下关于Markdown的简单语法。 Attention Please This article is also available in English. 1. 标题 使用 # 表示标题，一级标题使用一个 # ，二级标题使用两个 ## ，以此类推，共有六级标题。# 和标题之间记得有个空格哦。 一级标题二级标题三级标题四级标题五级标题六级标题1234567891011# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 2. 引用使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推。 如果 &gt; 和 &gt;&gt; 嵌套使用的话，从 &gt;&gt; 退到 &gt; 时，必须之间要加一个空格或者 &gt; 作为过渡，否则默认为下一行和上一行是同一级别的引用。如示例所示。 引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。 ❗ 部分编辑器不支持多级嵌套，建议不要使用 示例 这是一级引用 这是二级引用 这是三级引用 这是一级引用 123456&gt; 这是一级引用&gt; &gt; 这是二级引用&gt; &gt;&gt; &gt; &gt; 这是三级引用&gt; 这是一级引用 3. 代码块使用3个连续的` 符号包围起来表示代码块。可以指定语言来使代码高亮。 示例 12345$(document).ready(function() { $('pre code').each(function(i, block) { hljs.highlightBlock(block); });}); 1234567​```javascript$(document).ready(function() { $('pre code').each(function(i, block) { hljs.highlightBlock(block); });});​``` 4. 行内代码使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。 示例 这是 javascript 代码 1这是`javascript`代码 5. 链接使用 [](link) 表示行内链接。其中： [] 内的内容为要添加链接的文字。 link 为链接地址。 示例 我觉得叙此真是个棒棒哒的博客 😘. 1我觉得[叙此](https://xu.ci)真是个棒棒哒的博客 😘. 6. 数学公式 ❗ 部分编辑器支持的公式语法并不相同，这里以Typora为例 两行$$中间输入符合Markdown公式语法，示例$$\\sum_{n=1}^{100}{a_n}$$ 123$$\\sum_{n=1}^{100}{a_n}$$ 7. 导入图片使用 ![Alt text](/path/to/img.jpg) 导入图片。其中： Alt text 为如果图片无法显示时显示的文字； /path/to/img.jpg 为图片所在路径； 本地引用是图片直接存储到本地通过相对路径引用，无需网络连接 上传图片将把图片上传至图床，这样在文档或图片移动时认可访问图片 示例 1![Markdown](https://i.loli.net/2020/03/14/I8wCZN4r9UltqTd.jpg) 8. Todo List小写x表示已完成， 空格表示未完成 支持数学公式 支持TodoList 支持自定义样式 支持自定义图床 1234- [x] 支持数学公式- [x] 支持TodoList- [x] 支持自定义样式- [ ] 支持自定义图床 9 粗体，斜体，高亮和删除线 使用 ** 或者 __ 表示粗体。 1**粗体** 使用 * 或者 _ 表示斜体。 1*斜体* 使用 *** 表示全部粗体和斜体 1***全部粗体和斜体*** 使用==表示==高亮== ❗ 部分编辑器不支持高亮 1==高亮== 使用~~表示删除 1~~删除~~ *，= 或 _ 的后面不要跟空格哦 10. 列表使用 1. 1. 1. 表示有序列表，使用 * 或 - 或 + 表示无序列表。 无序列表或有序列表标记和后面的文字之间要有一个空格隔开。 有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。 无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例2所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。 例1：有序列表 第一点 第二点 第三点 1231. 第一点1. 第二点1. 第三点 例2：无序列表 一级无序列表内容 二级无序列表内容 三级无序列表内容 一级无序列表内容 1234567+ 一级无序列表内容 - 二级无序列表内容 - 三级无序列表内容* 一级无序列表内容 11. 分割线使用 --- 或者 *** 或者 * * * 表示水平分割线。 只要 * 或者 - 大于等于三个就可组成一条平行线。 使用 --- 作为水平分割线时，要在它的前后都空一行，防止 --- 被当成标题标记的表示方式。 示例 1234567---**** * * 12. 表格默认表格： Heading Heading Heading Cell Cell Cell Cell Cell Cell 1234Heading | Heading | Heading------- | ------- | -------Cell | Cell | CellCell | Cell | Cell 对齐方式： Heading Heading Heading Left Center Right Left Center Right 1234Heading | Heading | Heading:----- | :----: | ------:Left | Center | RightLeft | Center | Right 13. emoji使用 :emoji代码: 在markdown里添加emoji 点击这里查看所有支持的emoji代码 ❗ 部分编辑器不支持emoji code 建议直接输入emoji，点击这里查看并复制emoji","link":"/2020/05/%E5%B8%B8%E7%94%A8Markdown%E8%AF%AD%E6%B3%95/"},{"title":"使用可视化Docker管理工具Portainer","text":"在Mac环境下，可以用docker自己的dashboard查看各个container运行情况，但是在Windows下或者部署到Linux服务器上之后，想要可视化的对各container/image进行管理，就会麻烦一些 更何况如果在多台服务器上部署了docker集群，那多台服务器都用纯命令行来操作，我觉得不太现实，于是Portainer就可以来解决这个问题 拉取portainer的镜像： 1docker pull docker.io/portainer/portainer 运行： 12345docker run -d -p 9000:9000 \\--restart=always \\-v /var/run/docker.sock:/var/run/docker.sock \\--name portainer \\docker.io/portainer/portainer","link":"/2020/06/%E4%BD%BF%E7%94%A8%E5%8F%AF%E8%A7%86%E5%8C%96Docker%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Portainer/"},{"title":"关于微软office相关问题的汇总","text":"并非office使用教程 解决Windows下，开了看世界软件，UWP版OneNote无法同步的问题在powershell里，用管理员身份执行： 1checknetisolation loopbackexempt -a -n=&quot;microsoft.office.onenote_8wekyb3d8bbwe&quot; 原因好像是微软为了安全性默认限制了UWP程序连接本地地址（127.0.0.1，192.168.137.1，172.16这种），这个命令只是解除这个限制 所以也并不会导致不开看世界软件，没法同步的情况。开不开都可以正常同步 申请世纪互联社区版office365国内是由世纪互联运营的，onedrive的地址也在国内，速度就很快（虽然现在国际版的也很快，但毕竟不如国内的快和稳） 而世纪互联版的巨贵无比，所以可以试一下申请社区版，反正就试一下，也不一定能通过，据说几个月的审批时间也很正常，就试一下： https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR5a9ywx00pJLl3Z6FXg7FadUMTZZUVZDWE9OWURFMlNCUVlLNFRQTVRPUi4u&amp;qrcode=true","link":"/2021/03/%E5%85%B3%E4%BA%8E%E5%BE%AE%E8%BD%AFoffice%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%B1%87%E6%80%BB/"},{"title":"成为业务专家的方法论","text":"可能我们都想成为技术上的大牛，写出优秀的开源框架/工具造福大家。 然而实际上可能我们都深陷业务的泥潭，似乎怎么也处理不干净纷繁复杂的业务。 身为打工仔就是这样，没办法，那既然只能依赖写业务去养家糊口，那要做就得尽量做到最好。 那面对复杂的业务，应该从哪里入手呢？哪些是最重要的环节呢？ 了解业务应从三方面入手 价值 流程 架构（复杂业务） 价值 toC：对用户的价值 toB：对商户的价值 toG：对ZF的价值（以下两条个别业务才有） 对社会的价值等等 流程 业务流程 参与角色的流程（运营流程、审批流程、开发流程） 业务架构 以使用为维度上下游架构 以开发为维度上下游结构 价值体现 指标：引入之前/引入之后的产品指标 业务数据：核心业务数据有什么变化 最后，参考某业务介绍来看，主要内容是： 产品价值（toC toB） A产品介绍 A产品业务流程 B产品介绍 B产品业务流程 业务发展趋势 架构基线 核心领域 架构设计 核心链路 技术规划 风险规划","link":"/2021/03/%E6%88%90%E4%B8%BA%E4%B8%9A%E5%8A%A1%E4%B8%93%E5%AE%B6%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"title":"","text":"比较重要的两个算法代码实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package gurq.sort;import java.util.Arrays;/** * 归并排序 * @author gurq * @date 2020/11/15 11:46 下午 */public class MergeSort { public static void main(String[] args) { int[] arr = new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1}; sort(arr); System.out.println(Arrays.toString(arr)); } private static void sort(int[] arr) { if (arr == null || arr.length &lt; 2) { return; } int[] temp = new int[arr.length]; sort(arr, temp, 0, arr.length - 1); } private static void sort(int[] arr, int[] temp, int left, int right) { if (left &gt;= right) { return; } int mid = (left + right) / 2; sort(arr, temp, left, mid); sort(arr, temp, mid + 1, right); merge(arr, temp, left, mid, right); } private static void merge(int[] arr, int[] temp, int left, int mid, int right) { int a = left; int b = mid + 1; int c = 0; while (a &lt;= mid &amp;&amp; b &lt;= right) { if (arr[a] &lt;= arr[b]) { temp[c++] = arr[a++]; } else { temp[c++] = arr[b++]; } } while (a &lt;= mid) { temp[c++] = arr[a++]; } while (b &lt;= right) { temp[c++] = arr[b++]; } c = 0; while (left &lt;= right) { arr[left++] = temp[c++]; } }} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package gurq.sort;import java.util.Arrays;/** * 快排 * @author gurq * @date 2020/11/15 10:22 下午 */public class QuickSort { public static void main(String[] args) { int[] arr = new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1}; quick(arr); System.out.println(Arrays.toString(arr)); } private static void quick(int[] arr){ if (arr == null || arr.length &lt; 2) { return; } sort(arr, 0, arr.length - 1); } private static void sort(int[] arr, int left, int right) { int a = left; int b = right; if (a &gt; b) { return; } int c = arr[a]; int temp; while (a &lt; b) { while (a &lt; b &amp;&amp; arr[b] &gt;= c) { b--; } while (a &lt; b &amp;&amp; arr[a] &lt;= c) { a++; } if (a &lt; b) { temp = arr[a]; arr[a] = arr[b]; arr[b] = temp; } } arr[left] = arr[a]; arr[a] = c; sort(arr, left, a - 1); sort(arr, a + 1, right); }}","link":"/2020/10/%E5%BF%AB%E6%8E%92%E5%BD%92%E5%B9%B6/"},{"title":"程序员成长之路","text":"本文出于本人职业迷茫期。目前距离身边的各路大神有着很大的差距，但是总体水平还算勉强合格，看网上普通的教程已经没什么大的收获，又不知如何拉近和大神的距离。 所以写下此文，一边梳理思路，总结目前认为如果再给我一次机会重头再来，进步的最优解是什么，一边反思总结使用这些方法，能否让我的职业生涯的技术深度再进一步。 本文适合1-5年Java从业经验的人看。 为什么程序员要持续学习，靠经验累积不行么？业务领域可以，技术领域不行 举个例子： 20年从业经验的骨科医生 VS 20年从业经验的Spring + struts2 + hibernate + JSP开发的IT技术人员 现在还用JSP做企业开发说一句没什么技术追求应该不算过分吧 所以，由于IT技术行业日新月异的发展，不跟上时代的脚步是不行的，很快就会被淘汰 如何高效的学习我认为要从熟练使用工具、多听、多看、多读、多写、定周计划几方面入手 熟练使用工具 工欲善其事，必先利其器 人类区别于动物的标志之一是制作和使用工具 磨刀不误砍柴工 一下摆了3个名言来佐证我把这条放在第一的重要性。 工具能极大的提升你的效率，举个例子：不会还有人用记事本写大型项目吧？ 以下是我认为比较重要的，需要掌握的工具： 1、笔记类： 人都是会忘的，学了又忘，基本等同于不会。并且如果一味的输入知识，不会输出，也基本等同于不会。“一听就会，一做就错”，都上过学吧，这句话简直太有道理了，听懂了跟你能简洁而准确的表达出来这是两个概念 所以提炼你掌握的技能，输出成文档，有利于构建你的知识体系，便于以后捡起来复习，同时也造福于社会 这里需要掌握三种笔记类工具： 文字类：notion、飞书、语雀、onenote等 思维导图类：知犀、gitmind、xmind、飞书、幕布等 各种画图工具：dram.io、Visual Paradigm、processon、亿图图示等 2、开发工具类 idea是不是只会写代码，运行，debug？ idea那么多菜单、选项、快捷键都知道是干嘛的么？ idea有哪些插件能进一步提升效率？ linux命令会多少？只会cd ls grep？ 出了线上问题，别人可能3分钟就定位到问题了，你对这些开发常用的工具都不熟的话，你要多久？ 3、语言工具类 Spring、SpringBoot、SpringCloud都掌握了么？ Java自己的stream流、lambda表达式、还有其他的第三方工具包：guava、Apache的工具包等，避免重复造轮子的工具包会用么？ 以上不是说要求看源码，要能自己实现一个的要求，就是熟练使用，有做到么？当然，能精通自然是最好的 多听多跟身边大牛聊天，多听一些讲座，听人吹牛逼 起码你知道有这么个东西，要是更进一步，能听到这人在说什么，再进一步，听出来这人有没有错，错在哪，更好的解决方案是什么 多看看视频、看新闻、站在巨人的肩膀上 视频网站：YouTube、Pluralsight新闻：Hacker News、thenewstack.io、medium.com 多读读书，书单网上一搜就有很多，不再赘述 多写定期刷题、时不时写点小的项目demo 定周计划计划要结合自身情况，定一个能长期坚持下去的计划，都完成了下周可以加，完不成下周就减。长期坚持比短期做了很多，心理很抗拒周计划来的强。 这是我在阿里995情况下的周计划： 两篇技术文档——1小时 产出一篇学习文档——2小时 leetcode一到2道题——1小时 新闻、视频——1小时 写小项目——2小时 每周共计7小时（2小时输入5小时输出），就这都完成的很困难，唉，在阿里真是忙，感觉提升速度慢了好多好多，所以这也是我迷茫期的原因之一吧，唉。。。 共勉吧大家","link":"/2021/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/"},{"title":"用docker-maven-plugin推送至dockerhub","text":"为了个人更方便地开发和部署，我使用了docker-maven-plugin推送至dockerhub，这样在自己的服务器上重新拉一下就实现了部署，非常方便 官方文档：https://github.com/spotify/docker-maven-plugin 首先设置 maven 的 setting.xml ，在 servers 的标签下添加： 1234567891011&lt;server&gt; &lt;!--maven的pom中可以根据这个id找到这个server节点的配置--&gt; &lt;id&gt;docker-hub&lt;/id&gt; &lt;!--这里是docker hub的账号和密码--&gt; &lt;username&gt;账号&lt;/username&gt; &lt;password&gt;密码&lt;/password&gt; &lt;configuration&gt; &lt;!--这是在docker hub注册时填写的邮箱--&gt; &lt;email&gt;邮箱&lt;/email&gt; &lt;/configuration&gt;&lt;/server&gt; 以下这种方式无需编写Dockerfile，如需使用Dockerfile方式构建镜像，请参考官方文档：https://github.com/spotify/docker-maven-plugin#use-a-dockerfile 打开项目的 pom.xml ，在 build -&gt; plugins 下面添加： 1234567891011121314151617181920&lt;plugin&gt; &lt;groupId&gt;com.spotify&lt;/groupId&gt; &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; &lt;imageName&gt;你dockerhub的用户名/${artifactId}:${version}&lt;/imageName&gt; &lt;baseImage&gt;java&lt;/baseImage&gt; &lt;entryPoint&gt;[&quot;java&quot;, &quot;-jar&quot;, &quot;/${project.build.finalName}.jar&quot;]&lt;/entryPoint&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath&gt;/&lt;/targetPath&gt; &lt;directory&gt;${project.build.directory}&lt;/directory&gt; &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;!-- 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像 --&gt; &lt;serverId&gt;docker-hub&lt;/serverId&gt; &lt;/configuration&gt; &lt;/plugin&gt; 然后用maven打包构建并推送就可以了 1mvn clean package docker:build -DpushImage","link":"/2020/07/%E7%94%A8docker-maven-plugin%E6%8E%A8%E9%80%81%E8%87%B3dockerhub/"},{"title":"裸辞三个月有感","text":"一句话总结： 舒服是真的舒服，后悔是真的后悔 不是后悔歇三个月，而是这三个月玩没玩好，学更是没学，确实是浪费了，下次努力歇的更好💪 下面是完整版： 从七月底提出辞职，到8月1号开始休假，到现在也算是休了三个月了，开始准备着手准备面试了。 说实话人生中能像现在这样很惬意的，什么事情都不用考虑，真正的做想做的事的时间其实并不多。 上学的时候寒暑假要和父母勾心斗角找玩电脑的机会，还要补作业。 工作以后每个假期都是这么的短暂——我为什么没子承父业继续去当老师呢？ 以后结婚生子了恐怕就更没多少这样的机会去休息了。 这三个月是真真正正没有作业、没有金钱、没有父母/对象催促的烦恼，真正想干什么就干什么的三个月——当然，现在父母和对象开始催我找工作了，于是美好的时光结束了。 这三个月做了什么呢？原计划是： 一个月玩——旅游，打游戏，尤其是塞尔达，腾出时间好好给塞尔达打通关 一个月学习——准备面试 / 规律作息 / 开始自己做饭 / 健身减肥 然后在中秋节前找工作入职，拿一波新公司的中秋福利，休个中秋+十一，美滋滋。 然而真正的假期开始了，刚休息的时候作息仍同上班时一样，每天八点不到就起了，起来就开始打游戏，很认真很痛快的打了几天游戏之后，一切都开始变糟了。 持续了两个多月的作息颠倒——每天三四点睡，到后来六七点睡，甚至七点多下楼买个早饭，吃了早饭再睡 一切计划都被搁置了——并没有开始学习不说，就连玩都没有按计划去玩。除了刚开始的几天高质量的按计划玩游戏以外，后面就连玩游戏都没有按计划去玩，甚至说都没怎么玩好 整天整天的无所事事，就那种什么事情都没做，但是一天就这么过去了都感觉，回顾过去的一小时、三小时、五小时，似乎也没有闲着，但是真的什么事情都没有做 总结起来自己真不是一个自律的人，尤其是还有一个比我更不自律的女朋友一起生活的时候，就更容易乱了节奏——明明是不用上班无忧无虑的打游戏时间，但只要玩女朋友醒着，我都只能玩那些可以随时暂停的游戏，说不定什么时候她就要找我 什么都没做，什么都没做好 感想回顾这三个月，在我人生中难得的三个月，可能也是在大多数人的生活中绝无仅有的三个月，舒服是真的舒服，后悔是真的后悔，虽然这三个月过的可以说是很失败，但也算是一个经验教训： 下次再给自己放假，可能也就是下次换工作的时候，裸辞以前一定要做好假期时间表，如何玩，如何学，都安排好——如果玩都不能好好玩，那么就滚回去上班，这可是一天几百块钱买来的玩的时间，不好好利用就回去挣钱去！！！ 下次一定得歇的更好","link":"/2020/10/%E8%A3%B8%E8%BE%9E%E4%B8%89%E4%B8%AA%E6%9C%88%E6%9C%89%E6%84%9F/"},{"title":"突击面试：Mysql","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《SQL基础教程》《高性能MySQL》 事务隔离级别说事务隔离级别之前需要先弄明白三个概念：脏读、不可重复读、幻读 脏读现在并发了俩事务，第一个事务先修改了一条数据，然后第二个事务进来读了这条数据，结果刚读完，第一个事务回滚了，数据库里还是数据之前的状态了，那你第二个数据读到的内容对不对？肯定不对啊，这就是读了脏数据 要解决脏读，需要让事务不能读取到其他未提交的事务所影响的数据就可以了，也就是事务隔离级别的：Read Committed 不可重复读还是并发了俩事务，第一个事务先读了一行，然后第二个事务进来给这行修改了/删除了，然后第二个事务结束了，提交了，执行完了。然而第一个事务还没完，第一个事务因为业务需要又读了一次，结果这同一个事务中，重复读同一行数据两次，结果却不一样，这就是不可重复读。不可重复读这一现象是否正确，要取决于业务场景 要做到可重复读，需要在这个事务执行的时候锁住这一行，其他的事务没法操作不就没事了么，也就是事务隔离级别的：Repeatable Read 幻读依然是并发了俩事务，第一个事务比如说，删表跑路了，直接delete table 没加 where ，然后第二个事务往表里插入了一条数据，这俩事务执行完以后第一个事务一看：不对啊，我明明都删了啊，这多的那条哪来的？我出现了幻觉？影响了删表跑路的进程，这仿佛幻觉一样的一条，就是幻读。幻读这一现象是否正确，要取决于业务场景 所以要做到不幻读，那读的时候行锁就没用了，得把整个表给锁住，也就是事务隔离级别的：Serializable 💡所以不可重复读和幻读最大的区别，同样也就是Repeatable Read和Serializable的区别，就是锁行和锁表的区别，解决不可重复读是锁行，所以不可重复读是修改/删除导致的，解决幻读要锁表，所以幻读是新增导致的 理解了这仨东西，那事务隔离级别理解起来就更简单了，就是为了避免出现这仨东西出来的，看下面这图就知道 1. Read Uncommitted(读未提交)可以读取其他事务没提交的内容 2. Read Committed(读提交)Oracle的默认隔离级别。只能读别的事务已经提交的内容 3. Repeatable Read(重复读)Mysql的默认隔离级别。同一个事务中，对同一行多次读的内容是相同的 4. Serializable(序列化)最高隔离级别。所有事务操作依次顺序执行。注意这会导致并发度下降，性能最差。通常会用其他并发级别加上相应的并发锁机制来取代它。 💡 因为3有行锁，4有表锁，所以一般来说隔离级别越高，性能越差 索引一种优化查询的数据结构，就像字典的目录一样，提前帮数据建好目录，查找的时候就快很多，简单的说就是空间换时间 建索引本身需要开销的，时间开销和空间开销。 时间开销体现在：插入会变慢一点点，并且如果有大量的数据的表的话，这时候新建索引会锁表（长事务执行，阻塞建索引语句获取metadata独占锁，继而所有同表的语句都被阻塞了），那如何解决锁表问题呢，嗨，业务要求没那么高，可以停机维护的，就停机维护的时候再加索引，业务要求高了，就得先备份，再加索引，再替换回来。 空间开销嘛，就不谈了，加索引肯定要占空间 索引的种类hash索引，B+树，最常见，还有完全平衡二叉树，B树，用的不多，甚至很多工具比如Navicat上都没法选，不打算了解 hash索引是对那一列对值做了hash，所以是精准匹配，不适用于需要like这样搜索的查询，并且对在硬盘上是否连续存放没啥关系，所以如果是用在查比如UUID上，会很合适 完全平衡二叉树就是有序的二叉树，支持范围查找，基本上远不如B+树，不考虑用 B+树和B树这俩的共同点是：都可以在树的节点存储多个元素，和完全平衡二叉树一样都是天然有序，所以范围查询不需要全表扫描 这俩的区别是：B+树的子节点存储了所有的父节点，并且子节点之间用指针连接。B树在父节点上也存了数据，B+树只在子节点上存了数据。 所以一看就明白，B树和B+树因为存储了多个元素，所以更适合做范围查询，并且B+树更像是图了，不仅仅是树的结构，所以检索次数更少，磁盘IO也就更少了，效率更高 聚簇索引和非聚簇索引（辅助索引）建表的时候，一般会建个ID作为主键，这个主键就是聚簇索引 聚簇索引最主要的特点是，这个索引整行的数据都存放在子点节点上，一张表只能有一个聚簇索引 而辅助索引是除了索引列以外，还包含了聚簇索引键（也就是主键），然后再根据聚簇索引键再回表查那一行的数据 也就是说一般来说，非聚簇索引会比聚簇索引多查一次，效率会低一些 但是有特殊情况，比如说如果要查的列恰好就只是辅助索引的内容，那就直接返回就行了，不用再回表查别的数据了，这个又叫覆盖索引 联合索引因为最左前缀匹配的原则，要把where中最经常用的放在左边 因为如果建了一个联合索引（1，2，3），实际上数据库里会多三个索引：（1），（1，2），（1，2，3），但是没有（2，3）的索引，所以如果where里面没有1的话，就不走索引了 查看sql执行情况用explain查看执行计划 为什么有时候明明建了索引，但是执行的时候却没有通过索引呢如果不是因为索引没有覆盖到的话，那可能是因为查询优化器认为不走索引效率更高 查询优化器的工作大致流程： 根据搜索条件，找出所有可能使用的索引 计算全表扫描的代价 计算使用不同索引执行查询的代价 对比各种执行方案的代价，找出成本最低的那一个 被索引字段如果是函数，则不会走索引 如果select的字段有1234，而123有索引，且有一个是like ‘%param%’有左百分号时，由于要回表+最左匹配的原则会导致全表扫，不走索引 但是如果select字段123，索引也是123，不管是不是模糊查询都不会回表，会走索引 乐观锁和悲观锁乐观锁乐观锁嘛，顾名思义，就比较乐观，觉得一般来说读不会有问题，只在增删改的时候加锁，适用于读多写少的情况 悲观锁就挺悲观的，咋着都会出问题，在读的时候就会加锁，适用于读少写多的情况，确保不会发生冲突 乐观锁的实现方式1. CAS无锁算法，会有ABA问题，想解决ABA问题的话就要加版本号 2. 版本号每次写入的时候要判断读的version和数据库现有version是否相同，相同的话version要+1，写入。不相同的话就尝试更新 acidacid就是四个特性的英文首字母，数据库必须满足这四个特性才算是支持事务 原子性（Atomicity）事务中的操作，要么都执行，要么都不执行 一致性（Consistency）保证不论这时候并发有多少个，都不能扰乱事务正常执行，确保系统处于一致状态 有点绕，不知道怎么表达，就比如说一个数据库里2条记录，A账户和B账户各100块，总共200块，然后疯狂执行事务，让他们两个账户互相转钱，不管多少个事务，不管并发有多少，在任何一个时间点AB账户的总和都应该是200块，不因为并发执行在某一刻出现问题 隔离性（Isolation）就是确保相同的功能，在同一时刻只能有一个事务正常执行（不同的功能可以并行） 持久性（Durability）事务执行完以后要持久化的体现在数据库里，不会没了，丢了，回滚了 MVCC多版本并发控制（Multi-Version Concurrency Control） 顾名思义，就是乐观锁的版本号方法，一个事务取数据的时候顺便把version取了，另一个事务也来取这条数据的时候，如果没有MVCC，那就要加排他锁，第二个事务只能等第一个事务执行完了才能读的到。但是有了MVCC，第二个事务也可以来读，读的时候也拿到了version，然后谁先操作完了谁给version+1写回去，后写的人发现持有的version和数据库里现有的对不上了，就更新了再操作。虽然消耗了一些性能和运算量，但是比干等着锁来的快啊！ 比如：数据库读可提交的实现一般都用的MVCC，每次个事务来读都相当于创建一个带版本号的副本 数据库优化这里因为没有实际操作经验，就只能谈谈理论上能做的 判断是否由于硬件原因导致，如CPU使用率满了导致偶发性的慢查询 数据上千万以后，超出了innodb_buffer的容量，导致每次定位索引会做更多的磁盘IO操作，所以设计之初就应该用雪花这样的有序id作为聚簇索引，保证数据在存放时在磁盘上是连续的，减少IO开销 explain查看是否没能正确设置索引 业务允许的前提下，先限定查询区间，禁止全表扫 垂直拆分，将一个业务表拆成俩业务表，比如list表和detail表 读写分离 水平拆分，比如用户表，根据用户创建的年份每年一个表，然后用sharding这样的工具去查 分库，不同的业务拆分至不同的数据库（物理机） 建议重构，用HBASE，MYSQL里只留id等类似于索引的数据，然后根据id集去HBASE里查 数据库的架构数据库常用的锁","link":"/2020/10/%E7%AA%81%E5%87%BB%E9%9D%A2%E8%AF%95%EF%BC%9AMysql/"},{"title":"突击面试：计算机网络","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《计算机网络》《TCP/IP详解卷一：协议》《计算机网络—自顶向下法》 浏览器输入URL按回车后，到底发生了什么经典经典经典的面试题，最常拿来问的，并且说我觉得最有必要掌握的，拿来放在第一个说 简单的说就是： 先解析URL看是不是合法，解析完了去URL对应的DNS，到DNS查到对应域名解析的ip了，再去那个ip的服务器建立连接建立了连接，就发请求发了请求，等着接服务器的响应接到了响应，把页面渲染出来 1. 浏览器解析URL 看URL是否合法–&gt;URL转码–&gt;安全检查/访问限制–&gt;要不要使用https–&gt;有没有缓存页面缓存–&gt;找DNS一直到这，可以说工作流程都还没离开浏览器呢 2. 找DNS 浏览器缓存–&gt;操作系统缓存–&gt;路由器缓存–&gt;ISP（首选DNS服务器，比如8.8.8.8之类的）缓存–&gt;根域名服务器查 3. TCP连接简单的说就四层： 应用层——&gt;原本的http数据 传输层——&gt;原本的http数据+TCP首部 网络层——&gt;原本的http数据+TCP首部+IP首部 链路层——&gt;原本的http数据+TCP首部+IP首部+以太网首部 3.1 应用层应用层简单的说就是要传的数据，什么http啊，smtp啊，dns啊之类的要传的数据笼统的说都是应用层。 就好比发快递，这就是你要发的东西。 3.2 传输层传输层通过三次握手建立了TCP连接（三次握手四次挥手，见后面） 为了方便传输，比如你原本请求的内容巨大无比，比如好几兆，总要切割一下吧（切割成了报文段），切割成比如16k的小段分次发。那对方接到这么多碎片，怎么知道顺序呢，怎么知道这是完整的一个数据内容呢，所以传输层要在应用层的基础上，加一层TCP首部，每个报文段里面给报文标了编号确保接收端接受到以后能按顺序给拼接起来，并确保了完整性。 就好比发快递，你一个包裹装不下，那得拆成两个包裹发，并且这俩包裹都得注明是你发的，发了几个快递，要不然对方接的时候又不知道接没接全 3.3 网络层在传输层，把应用层切割好了以后，网络层又在传输层切割好的报文上面又加了一层IP地址 就好比发快递，你快递打好包裹了，那总要知道发给谁吧，所以要填写收货人的地址打成快递单子，贴在快递箱子上 3.4 链路层两台主机传输数据，都是在一段一段的链路层，链路层将从网络层接受到的报文组装成帧，在相邻的节点上的链路传送。如果链路中的某一段发现接收到的帧有差错（比如报文不完整），可以直接丢弃这个帧，省的让错误的帧在链路上继续走下去 就好比发快递，好多个快递装车上路了，这个物流就是链路层，如果发现快递有问题，就直接丢了 4. 处理请求这一步，请求已经到目标服务器了，然后经过目标服务器自己处理一下业务逻辑，返回一个响应，这个响应呢，再从响应方的应用层–&gt;传输层–&gt;网络层–&gt;链路层，到请求发起方，也就是我们的浏览器 5. 接受响应浏览器接收响应，比如看状态码是不是200啊之类的 6. 渲染页面在浏览器渲染出来，没了 TCP三次握手和四次挥手明确目的： 三次握手是为了确保双方都能正常接受数据并发送数据 四次挥手说为了让双方都停止发送数据并通知对方 三次握手 就好比打电话： A：喂，你能听到么？（第一次握手：发SYN包） B：嗯，我能听到，你能听到么？（第二次握手：回SYN包+ACK包） A：我能听到（第三次握手：回ACK包） 回SYN包和回ACK包的目的是：确保接受到的和自己发出去的一致，说明对方确实接受到了 四次挥手 就好比打电话： A：喂，我准备挂电话了啊（第一次挥手：发FIN） B：嗯，好，我知道你要挂了，但我这边话还没说完（第二次挥手：回ACK，ACK的序号为FIN的序号+1） B：balabala，好了，我说完了，我这边也要挂了啊（第三次挥手：发FIN） A：嗯，好，我这边也知道你要挂了，那溜了，拜拜（第四次挥手：回ACK，ACK的序号为FIN的序号+1） TCP和UDP的区别 TCP需要建立连接，UDP不需要（也导致了TCP可以知道对方收到了数据，而UDP不知道） TCP传输相对可靠，UDP想保证传输可达性可以多倍发包，比如加速器就是这么做的，还有比如某些翻墙的协议 TCP传输的是字节流，UDP传输的是数据报文段 性能上，TCP比UDP慢，开销也更大 要求数据可靠的，比如传文件，传邮件，用TCP/要求速度快的，用UDP，比如打游戏","link":"/2020/10/%E7%AA%81%E5%87%BB%E9%9D%A2%E8%AF%95%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"title":"面试突击：Java基础","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《Thinking in Java》 关键命令jstack查死锁 jmap查内存 jstat查性能 锁简单的说Java的锁分为两大种：Lock和synchronized Lock是Java的对象，synchronized是Java自带的关键字，在1.6以前synchronized相较于Lock有着比较大的性能差异，在1.6的时候给synchronized引入了自适应自旋、轻量级锁、偏向锁等优化，使得现在synchronized和Lock并没有什么明显的性能差异了，使用哪个完全看使用场景。 如果只是想对某一块代码或者说资源加锁，就可以简单的使用synchronized，如果说需要灵活一些，比如在这里传参、设置超时时间、甚至加锁解锁在不同的方法里，那就得用Lock 死锁死锁简单的说就是俩线程都需要对方的资源，又抢不过来，就只能互相等待，结果谁都执行不了 死锁的4要素： 互斥 占有且等待 不可抢占 循环等待 所以如何避免死锁就是在可能导致死锁的地方，比如同时申请两个锁的时候，总是以相同顺序去申请 CAS一般加锁都是悲观锁，但是悲观锁一般来说效率比较低，所以CAS就是来解决这些问题的，它是一种乐观锁，在java.util.concurrent包里面基本都是用的CAS，包括atomic包也基本都是用CAS实现的 CAS，compare and swap（set），顾名思义，比较并替换 每个线程CAS的时候要带俩参数：要改变的值原本是什么、要把它变成什么 这样在CAS里面就会进行比较，如果当前内存中的值，和你要改变的值相同，说明你是对的，或者说你是第一个到的，那就把内存的值改成你要变的值。而几乎同时再进来的后面的线程，你带来的原本的值已经不对了，自然执行不成功，就只能把现在的值返给你，这就确保了在多线程下，对同一个资源操作，虽然没加锁，仍能保证不会出问题。 CAS会带来ABA问题，就是A改了这个值，B又来给改回去了，这时候再来的线程会以为这个值没被A和B改过，还是原来的值，要解决这个问题就需要再加一个版本号作为参数 分布式锁synchronized是JVM提供的，所以只能单机，Lock在不尽兴扩展的话也只作用于单机，而我们现在分布式的理念又比较流行，所以如果说有需求要确保一个分布式锁的话，这两个就用不了了，就需要分布式锁。 分布式锁一般锁基于数据库、redis或者其他手段来做，这里就说一下数据库或者redis 基于数据库就是相当于基于数据库的乐观锁，给一个字段是锁名，一个字段是锁的状态，一个字段是版本号，各微服务去取锁的状态和版本号就行了，由于数据库自己有事务隔离，自然就保证了取的值的状态。但是我不是很推荐这个方法，本身现在分布式架构下，压力最大最难做拓展的就是数据库，锁这个频繁操作的事这又给数据库加负担，个人不喜欢。 基于Redis的话就很简单了，用setnx（锁名，1）的方法就行了，返回0代表占锁失败，返回1代表占锁成功，拿到锁的线程执行完了给锁名删了就行了。要拓展，防死锁的话value就不是1了，需要是当前时间+过期时间，取到以后和当前时间对比，小于当前时间就获取锁，大于当前时间就没获取到锁 volatilevolatile简单的说就是保证了可见性，你加了volatile的值，你看到是1，那么就一定是1，但是他不能保证原子性，多线程同时操作还是可能会有线程问题的。解决线程问题只能加锁。 它的原理是： 实际上为了解决效率问题，每个线程并不是直接从主内存中读值，而是先读到每个线程自己的工作内存中，那这样多个线程就有可能各自工作内存里面的同一个值不一样。 加了volatile以后，线程在改变这个值的时候，会强制刷新主内存中的值，并强制让其他线程的工作内存中的值过期，其他内存在用的时候得再从主内存中取 volatile还可以保证执行的顺序，代码在被jvm编译器优化后其实不一定能保证执行顺序就是你的代码顺序，用volatile就可以保证 volatile还有个问题是缓存行，如果两个加了volatile的值在同一个缓存行中，那么同时刷新主内存的时候会导致出问题，需要加关键字来做跨行优化 IOIO分为三种：BIO，NIO，AIO IO嘛，就是IN和OUT，说白了也就是数据交换吧，比如从磁盘读写文件，服务期间通讯，这些就是IO的主要用途 BIO早期的IO就是BIO，现在用在文件读写上也是很好用的，但是如果用在服务器间通讯的话就会有个很大的问题：因为BIO是同步阻塞的，操作得在一个线程内完成，所以要是用在网络上的话，那么客户端发起一个请求，服务端就得开启一个线程去接，各自处理业务的时候大家都得互相等着，那客户端多的话对一个服务端来说可能就遭不住了。 NIO而NIO为了解决这个问题，采用了轮询模式，用一个线程不停的循环，这个线程也就是selector。它不停的循环，去看注册在自己身上的各个channel有没有连接，有连接的时候，才会去开启新的线程去处理，多路请求进来只有一个selector去处理，这就是多路复用。而每次请求呢，也不是像BIO那样用字节流或者字符流，而是用一个缓冲区，也就是buffer，一次传输这么多数据，那边接受完了，这边再装这么多，装完为止，NIO同样是同步的，只是同步非阻塞，如果并发的太多服务端处理不过来，还是需要排队等待的 AIOAIO是异步非阻塞的，在NIO的基础上，客户端传完数据以后不需要等待服务端处理了，客户端直接结束连接，等服务端处理完了以后再通知客户端来读取数据。 垃圾回收什么时候会触发垃圾回收新生代的eden区满了，会触发年轻代gc，minor gc，这个gc非常频繁 新生代没被回收的，熬过了几次minor gc后会进入老年代（没被回收的会进入到年轻代到surviver0，然后survivor1年龄加一岁。够一个阈值了就进入老年代，剩下的并进surviver0，然后0和1交换） 老年代满了会触发full gc 可以调大gc和非gc的比来避免超过了GCTimeRatio触发OOM 调大新生代老年代的比来减慢full gc的次数 调多新生代回收次数进入老年代的阈值来减少full gc次数 不过归根结底还是得找到为啥full gc回收不掉，用jmap看一下问题出在哪 回收的什么从gc root开始伸展，经过一次标记后仍然没有复活的对象 哪些可以是GC ROOT1、系统类加载器加载的类； 2、活跃线程持有的对象；调用栈（包括JVM栈、本地方法栈）持有的对象； 3、常量引用的对象； 4、静态属性实体引用的对象。 做了什么事G1用的是分代回收的方法 在minor gc的时候，使用多线程复制算法，使用两块内存空间，每次只用一块，触发gc后，将还活着的对象复制到另一块上，避免出现内存碎片，stw一次，触发即stw full gc用的是多线程标记-整理算法 G1在full gc上总共stw三次 初始标记，stw 并发标记，顾名思义，和程序一起并发执行，不stw 最终标记，stw 整理回收，stw CMS 初始标记（initial mark） 有 STW 并发标记（concurrent mark） 没有 STW 重新标记（remark） 有 STW 并发清除（concurrent sweep） 没有 STW 初始标记(STW initial mark)并发标记(Concurrent marking)并发预清理(Concurrent precleaning)重新标记(STW remark)并发清理(Concurrent sweeping)并发重置(Concurrent reset) 比起cms，优点在于更能充分利用CPU的多核性能更好、分代回收算法思想先进、标记-整理而不是标记-清除使得没有碎片 浮动垃圾是指由于在并发标记期间，有些原本不可达的对象变得可达了，所以为了避免回收掉还有用的数据，所以重新标记去掉那些可达对象的标记。但是由于在此期间，程序是并行的，所以肯定会产生新的垃圾，然后并没有对这部分进行标记，所以导致了浮动垃圾。不过其实不要紧，下一次回收就回收掉了。 真要解决可以价格配置，在full gc前加一次minor gc Java 11 ZGC 初始标记，STW 分区并发标记，STW，非常小 整理移动（读屏障） 筛选回收，SWT，如果时间长于10ms，会恢复之STW状态 **(STW)**Pause Mark Start，开始标记，这个阶段只会标记(Mark0)由root引用的object，组成Root Set Concurrent Mark，并发标记，从Root Set出发，并发遍历Root Set object的引用链并标记(Mark1) **(STW)**Pause Mark End，检查是否已经并发标记完成，如果不是，需要进行多一次Concurrent Mark Concurrent Process Non-Strong References，并发处理弱引用 Concurrent Reset Relocation Set Concurrent Destroy Detached Pages Concurrent Select Relocation Set，并发选择Relocation Set； Concurrent Prepare Relocation Set，并发预处理Relocation Set **(STW)**Pause Relocate Start，开始转移对象，依然是遍历root引用 Concurrent Relocate，并发转移，将需要回收的Page里的对象转移到Relocation Set，然后回收Page给系统重新利用 多线程线程的状态新建状态、就绪状态、运行状态、阻塞状态、等待状态、死亡状态 wait、sleep、join、yield的区别 wait/notify/notifyAll位于Object中，sleep、join、yield位于Thread中 wait阻塞当前线程，释放对象锁，其他线程可来争抢对象锁；sleep阻塞当前线程，持有对象锁，其他线程只能等待sleep结束后释放对象锁才可继续 yield并不阻塞当前线程，只是释放当前占有的CPU资源，使当前线程从运行状态变成就绪状态，但并不可靠，可能马上又进入到运行状态，暂时不知道什么情况下应该使用yield join是父线程等待子线程结束后执行，内部使用了wait，但是并没有notify，是jvm在子线程销毁的时候会notify all所有在该子线程join的父线程 如何实现线程继承Thread或者实现Runnable，这俩比Runnable好一些因为不能多继承，多实现用起来更灵活，然而我选择线程池 start和run的区别start开新线程，run不开；start内部调用了run Runnable和Callable的区别Runnable没返回值，Callable有返回值 CyclicBarrier和CountDownLatch都可以用来等其他线程，CountDownLatch不能重新计数，这里感觉用join更多一点 ThreadLocalThreadLocal实际上就是绑定了线程的一个map，是Thread.ThreadLocalMap的一条引用。就相当于定义了一个只有当前线程能访问的全局变量，可以一定程度上解决线程安全问题来达到安全的使用全局变量的目的，比如一般的mybatis的分页插件就是用了这个ThreadLocal来达到不用把分页参数一层层往下传的目的，紧邻的第一条sql执行完以后就清除掉了 线程池 CachedThreadPool:创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 FixedThreadPool :创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。 ScheduledThreadPool :创建一个定长线程池，支持定时及周期性任务执行。 SingleThreadExecutor :创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。 ThreadPoolExecutor corePoolSize： 线程池核心线程数最大值 maximumPoolSize： 线程池最大线程数大小 keepAliveTime： 线程池中非核心线程空闲的存活时间大小 unit： 线程空闲存活时间单位 workQueue： 存放任务的阻塞队列 threadFactory： 用于设置创建线程的工厂，可以给创建的线程设置有意义的名字，可方便排查问题。 handler： 线城池的饱和策略事件，主要有四种类型。 现在感觉从设计思路来说，1.7引入的fork/join好一些，每个线程都有自己的队列，谁先干完了从没干完的那可以窃取 阻塞队列 无届队列：顾名思义，没大小限制，并发太大处理不过来可能导致OOM 有届队列：FIFO的队列或者优先级队列 同步移交队列：放入这个队列必须有其他的线程等待接收，不推荐使用这个 拒绝策略 丢弃任务，抛出异常（默认） 丢弃任务，不抛出异常 丢弃队列最前面的任务，重新提交被拒绝的任务 由调用线程处理该任务 内存模型线程私有区 程序计数器 虚拟机栈 本地方法栈 线程共享区 堆 mate区（元空间） 常量池 LockSupport用户态/内核态总线锁类加载机制/双亲委派","link":"/2020/10/%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB%EF%BC%9AJava%E5%9F%BA%E7%A1%80/"},{"title":"面试突击：kafka","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《Kafka技术内幕》 讲讲你了解到kafka由于之前公司在我去之前就确定了了kafka作为消息队列的技术选型，我只是简单的去了解了一下kafka的原理 1. 为什么选择了kafka经过我个人的推测： 首先是因为kafka兼容性很好。之前的公司有大数据部，他们用scala开发，有量化交易部，他们用python，我们还有嵌入式部，他们用什么开发我就不知道了，因为没和他们打过交道，kafka在这种环境下的兼容性应该是比rabbitMQ或者rocketMQ好一些。 其次kafka本身性能十分优异，批处理能力很强，可靠性也很好，基本不用担心消息丢失。 所以架构选择了kafka作为消息队列。 2. 采用了发布-订阅模型发布-订阅模型相较于普通的队列模型，可以更好的服务于多个消费者的情况。 比如我们量化交易部做了用电预测后，可以通过kafka同时推消息给我们售电部和用电部，两个部门各自接到用电预测后做不同的业务逻辑处理。 3. 高性能首先，kafka是分布式的，在一个cluster中有多个broker，每个broker就对应了一台物理机。 kafka还有个概念是topic，生产者生产消息的时候要指定topic，消费者也是订阅topic，从topic里面拉取消息。 在这个topic内要分成多个partition，一般来说有几个broker就分几个partition，然后生产者发的消息会根据分配机制被分配到各个partition里面。 这就现实了负载均衡的功能，在高并发下平衡了多服务器的压力，保证了高吞吐量。这个架构也易于进行水平扩展，可以非常方便的动态调节。 架构图： 4. 高可用一个partition之中会有多个replica，这多个replica中会有一个leader，剩下的replica都是follower，生产者发送消息给leader，follower会从leader拉取消息作为备份，然后leader再把消息广播给consumer 如果leader挂掉的话，会从follower里面选举出一个leader（这里和redis的哨兵模式选主节点很像很像），如果follower和leader的同步率不够高的话是不能被选举的 架构图： 5. 架构示意图 6. 推拉结合保证最大效率生产者到topic是使用推的方式，可以第一时间将消息发出去，如果用拉的话可能发送不及时。 消费者到topic/follower到leader，是用拉的方式，用推的话如果消费能力不足可能会导致网络拥堵和服务拒绝。 kafka如何保证消息的顺序由于kafka只能保证一个partition内的顺序，不能保证topic分发partiton的顺序，所以如果业务上真的需要保证消息的顺序，那一般有三种做法： 生产者在发消息的时候指定发到topic的哪个partition里（最推荐） 一个topic只部署一个partition（不推荐） 生产者在发消息的时候，在消息体内标明需确保顺序的数量及序号（更不推荐） 什么情况下kafka会丢失消息1. 没推到生产者推送消息至topic时，由于网络波动，或者kafka设置等原因，可能会没推送到 解决办法： 设置重试次数和重试间隔 2. kafka出故障了比如partition虽然是有多副本的，可是由于follower是拉的机制，有可能leader挂掉的时候，所有follower没有一个全量拉取了，这就导致没拉取到的部分就丢了 解决办法： 设置replication.replica大一点，多增加follower 设置min.insync.replica大一点，这个是接收最少接接受到的副本，大于这个数才算推送成功 设置acks=all，代表了一个partition内所有的follower都拉到了，才算生产者推送成功（不是很推荐） 3. 消费者拿到消息后，消费者挂了我觉得这其实算是消费者自己的问题，应该从消费者这边考虑。。。不属于kafka的问题。。。不过这边也可以关闭一个设置就是自动提交，关闭以后需要有消费者发消息给kafka后，这条消息才会被出队列，不过这也会导致消息被重复消费的问题。。。 消息分配不平均是什么原因？如何解决？原因在不是因为指定了topic的partition的前提下，还发生这种情况，是因为kafka对key做了某种算法的hash，然后除以broker取余来分配所在的partition的 默认的算hash算法可能会导致如果key是简单key，如1，2，3这样的key，很可能大概率会导致算出来的hash相同，导致分配到了一台机器上 解决办法在构建key的时候后面追加时间戳","link":"/2020/10/%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB%EF%BC%9Akafka/"},{"title":"面试突击：Redis","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《Redis实战》《Redis设计与实现》 你对Redis了解多少如果面试要问的话可以按照一下顺序答，并把记得牢/懂得多的部分展开说，尽量连贯着说，说的全面点，让面试官无从下手打断你来问很深很难的问题（滑稽 1. 首先，Redis是非关系型数据库有别于Mysql、Oracle、Postgresql这样传统的关系型数据库，Redis设计之初就是用来存储key-value型数据的。 key只可以是string，value只可以是string，hash，list，set，zset（有序集合）。 这边开发的时候对象一般来说建议转成json再存，直接存对象很多时候是能存的（引入的redis的jar包会帮忙转成对应的五大类型），但是一是直接存对象，在Redis里面占的空间会更大，内存可能吃不消，二是复杂的对象有可能转换不回来。 2. Redis是内存级数据库Redis是存储在内存上的，所以先天就有读写快的优势。 不过也正因为是存储在内存上，可能因为断电等原因里面的数据就没了，所以除了对数据做容灾（十有八九会问，后面说）处理以外，并不建议将Redis作为持久化存储的数据库 3. 那同样是内存型，我们为什么不用比如guava内置的缓存，甚至直接用map结构存呢？是因为guava和map实现的是本地缓存，生命周期绑定在了所在服务的实例上，随着现在微服务的流行，一个项目可能会有多个微服务，同一个微服务也会有多个实例，用guava和map没法做到这多个实例，多个微服务，公用一个缓存的目的 4. Redis良好的性能，除了是因为是内存级数据库以外，还因为有优秀的线程模型Redis在都是内存级数据库里面最终脱颖而出，也是因为Redis在高并发的条件下有着更优异的性能。 Redis是单线程的，说他是单线程是因为它的核心：file event handler（文件事件处理器）是单线程的，它采用IO多路复用（也就是Java里NIO的设计思想，这里准备的好可以说，关于Java的NIO，想问的话可以一会儿说完Redis以后问，要不然会打断说Redis的思路，没做关于IO，NIO，AIO的准备这里就不要提NIO甚至不要提IO多路复用的事）来从多个socket接收事件，放入内置的队列中，再由文件事件分派器将事件分派给事件处理器 上面字太多，下面是简化版： 多个socket –&gt;IO多路复用 –&gt;一个队列 –&gt;事件分派器 –&gt;事件处理器 因为队列天然就可以将并发削峰，一个一个处理，并且Redis本身一般来说又只是对简单数据的简单增删改查，所以单个事件的处理速度非常快，从队列里出栈的速度也非常快，所以并发就被非常巧妙的化解了 5. 而因为Redis是内存型数据库，所以它的存储空间其实远不比硬盘型数据库那么就带来了一个问题：一直存数据，给空间装满了怎么办 所以为了解决这个问题： 5.1 在每次存数据的时候要设置过期时间基本上就我接触过的业务而言，没什么数据是需要永不过期，还必须得存在Redis里的，所以每次存数据都要设置过期时间 5.2 但是Redis的删除策略导致了，就算设置过期时间，仍然有可能不被删掉这里就要说一下Redis的删除策略了，Redis同时生效了两个删除策略： 5.2.1 定期删除定期删除，顾名思义，Redis每隔一段的时间（默认是100ms），随机抽取一部分key，看过期没过期，过期了就删掉 这里这么做是因为，Redis里面可能有几十，上百万的key，要是都遍历一遍，开销得多大，100ms都不一定够用的 5.2.2 惰性删除因为定期删除并不能把所有过期的key都删掉，所以当你从Redis里面取数据的时候，它还会判断一次这个数据过期了没，没过期就返给你，过期了就清掉，然后告诉你没了（明明是有的！他不给我），这就相当于主动触发删过期数据了 5.3.3 内存淘汰机制可是惰性删除仍然不能完全解决，如果你的业务上写多，读少，那终究有一刻还是会把一开始Redis占用的内存空间给占满的，所以Redis有内存淘汰机制来确保最终不会影响使用（仍然不代表所有过期的key都会被删掉） 这里最重要，最常用的是这个： allkeys-lru，当内存空间不足以写入新数据时，移除【最近】【最少】使用的key。 触发次数最少（只在内存空间不足时触发，不是定时触发），需要遍历/删除的东西也少，不会有很大的性能开销 在Redis4.0后又新增了一个淘汰机制，也是我觉得比较好的： allkeys-lfu，当内存空间不足以写入新数据时，移除【最少】使用的key。 比上面的优点是，触发以后删的更干净，那触发次数会更好，缺点是，触发的时候性能开销更大，各有利弊，我觉得都不错 还有其他的机制，因为感觉不是很重要，看一看能记住几个算几个吧： volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰 volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰 allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰 no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！ 下面这个是4.0和上面推荐的第二个一起新加的 volatile-lfu：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰 6. 刚才说到Redis可是持久化来容灾，那接下来就说一下这个持久化Redis主要有两种持久化方案：快照型和日志型 6.1 快照型（RDB）快照型是Redis默认开启的持久化方案，是需要触发的，触发一次会全量保存一次数据。 默认有三种触发方式同时生效： 900秒里，有一个key变动，保存快照 300秒里，有十个key变动，保存快照 60秒里，有一万个key变动，保存快照 优点：开销小，触发了才有开销。并且理论上相当于冷备份了，可以上传至文件服务器或者其他方案永久保存，用来追溯一些东西也是挺好的。 缺点：占用空间大，理论上丢数据可能丢的多，如果60秒内改动了9999个数据，结果Redis挂了，这9999个数据就丢失了，不可恢复 6.2 日志型（AOF）日志型，日志型现在最为主流，需要手动开启。 就相当于存两份，内存里一份，硬盘上一份，Redis在内存里每变化一条数据，在硬盘上也同时变化一条。 不过这样如果读写的快，硬盘IO会跟不上的，所以一般AOF用的是每秒一同步的策略，丢了最多丢一秒 实际上在线上环境，在性能/空间允许的情况下，两种可以都开 在4.0以后，还有混合型，AOF每次写的时候可以写整个压缩后的快照，不过这样优点是加载快，丢的东西少，缺点是性能开销更大 7. Redis作为数据库，也是支持事务的但是由于Redis的内存型数据库，所以作为事务的传统4要素，ACID，其中持久化，实现的比较特殊，之前已经说过了，和传统的关系型数据库实现的持久化不太一样。 并且，关于原子性的理解，Redis官方的理解是“**Either all of the commands or none are processed, so a Redis transaction is also atomic.**”，就是说命令要么都执行，要么都不执行。但是都执行了，执行没成功抛出异常了，然而前面执行成功的部分又不会回滚，官方认为还是执行了的，只是后面没成功而已嘛。 我个人认为这并不太原子性。。。emmm，每个人有每个人的看法嘛 这里有一种情况：如果一个事务里，有多个命令，其中后面一个命令，压根这个命令就是错的命令，并不是执行出错的那种，是压根没法执行的时候，在执行事务的时候前面正确的命令也不会生效，不过这是回滚么？我觉得不是，应该是执行的时候对事务内的命令检查了一下，命令错了就都不执行，压根前面正确的就没执行，怎么能说是回滚呢 8. 那说了这么多Redis，我们为什么要用Redis呢一般来说，Redis是用在读多写少的业务场景，将常用的读数据缓存起来，用来缓解数据库压力的 但是不管是Redis也好，还是用别的方案也好，都会面对一个核心问题：缓存命中率上不去怎么办 这个核心问题衍生了几个常见问题： 8.1 缓存雪崩由于之前说的Redis删除机制其实是并不可控的，尤其是常用的内存淘汰机制是有可能把还没到过期时间，过去一段时间用的不多的数据给删了。但是用的不多不代表就不用，只是没高频的高而已，一下子大面积删了，导致这些零星的请求一下子打到数据库去了，虽然一个缓存的请求量不多，但是删的多了量就上去了，数据库扛不住了，这就是缓存雪崩 要解决缓存雪崩：集群式部署Redis实例，哪个实例宕机了及时恢复 8.2 缓存穿透比如由于攻击者大量的构建了很多虚拟的key也好，比如像微博热点那样以前完全没料到，然后一下子爆了大量的相关的搜索，之前压根就没缓存相关key也好，比如代码写的时候设计有问题，完全就没缓存到一部分key也好，总之大量的请求压根就没缓存，穿过了Redis直接到了数据库里面，一下给数据库弄崩溃了 这两个归根结底都是因为缓存没拦住请求，缓存命中率低，导致过多的读请求直接到了数据库，给数据库弄崩了（现代架构最脆弱的最麻烦的就是数据库了，前端也好，后端也好，都可以多部署实例来分流，并且现在技术很成熟了，除了钱以外并不花特别多的成本，但是数据库扛不住了要改造，这可不是只是多花钱多布几台服务器的事了，整个后端逻辑很多部分都要重新改造） 要解决缓存穿透：应对性的缓存空key，或者用布隆过滤器过滤非法请求 8.3 缓存击穿因为热点key过期了，然后由于惰性删除，一取就直接过期了，导致瞬间高并发一下子到数据库那里了，这就是缓存击穿 要解决缓存击穿：设置热点key永不过期，或者上互斥锁 同时，在设计上也应该做好： redis集群部署，多部署几台不至于大面积雪崩。 后端做好熔断限流，最大程度保住数据库。 做好预警工作，当缓存命中率低于阈值且集群的内存使用率高出阈值要及时发出警报。 9. 那既然Redis的主要作用是缓存，那只要是缓存就都有一个小问题那就是数据一致性的问题。 数据库和缓存，一定会有个先后问题，比如先改了数据库，然后再同步到缓存。或者比如并发大的统计操作，先在缓存里加减，隔多少时间定期写回到数据库，这些情况都挺常见的。一般只要用缓存都会有或多或少的数据一致性的问题。 如果说业务上没那么高的数据一致性的要求，这样是最好的，效率最高。 如果产品经理就非得要做，那我的理解是就只好把修改的时候，把修改数据库和修改Redis放到spring的一个事务里面去，确保要更新就一起更新，但还是建议产品经理想想有没有别的方案，因为这么一搞，只要写的操作不是那么少，Redis的效率就会低很多 上面说完关于Redis就已经说了很多了，希望面试官能没有耐心听，跳到下一个知识点去，真要问下面的，就说这些只是略知皮毛，不知道其原理，一般都是架构组决定，运维来实施，确实不知道原因是什么 Redis为了实现高可用，有哪些部署模式1. 主从模式从节点复制主节点的信息 2. 哨兵模式定义了一个或多个哨兵，对Redis的节点进行监控，如果主节点挂了可以从其他子节点自动升级成主节点，哨兵是需要提前配置的，需要把各个节点的信息写在哨兵的配置文件里，所以要是节点多的话好像写起来麻烦，不太好做水平扩展 3. 集群模式集群模式的话就是集群的节点互相监控，自己推举主节点，这个好像更好一些，我以前公司用的这种方式 Redis的zset，底层用的什么数据结构用的跳表，因为Redis的作者觉得，在单线程下，用跳表实现起来比红黑树简洁 出处：https://news.ycombinator.com/item?id=1171423 这篇文章讲的非常好：https://www.cnblogs.com/liang1101/p/12984881.html 跳表的原理大概是，一个更优的，用在链表上的二分法，因为二分法适用于有序数组，但是有序链表压根就没有下标，那二分没法定位啊，取第几个就得遍历几次，这效率远不如直接遍历 所以跳表就通过层数来解决，每次新增一个元素的时候决定它从下往上数增了几层，50%一层，25%两层，12.5%三层，等等，最大32层，这样理论上只有一层的元素数达到2的64次方个数的时候才会有元素随机到32层 示意图如下： 然后找和插入的时候从上往下找，就类似于二分了，比如想往里插23: 从最上面一次找到最下面一层，就找到了 让手写源码？写不出来，告辞 插槽","link":"/2020/10/%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB%EF%BC%9ARedis/"},{"title":"面试突击：spring","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《Spring实战》 IOCIOC全称是Inverse of Control，控制反转，也叫依赖注入 这是一种设计思想，就是原本是你手动创建类，现在让spring框架来创建和管理，spring在一个map里管理这些类，key是对象的id或者name，value是对象(BeanDefinition) 先看一下简化后的结构图： 然后简单的对着图说一下架构： BeanFactory是整个IOC的核心，现在先不说，后面会引出 我们现在springboot最常用的一般是注解式，那么我们就从注解式的注入bean说起 注解式注入bean的环境，就是图中的AnnotationConfigApplicationContext，看名字就知道 它继承了父类：GenericApplicationContext 而GenericApplicationContext的父类，是AbstractApplicationContext 这个类有两个比较重要的子类，一个是刚刚说的Generic的子类，实现注解方式注入。另一个是XML的子类，是通过XML方式来注入。 AbstractApplicationContext实现了ConfigurableApplicationContext接口 而ConfigurableApplicationContext又实现了ApplicationContext接口，这个类就太熟悉了吧 而我们再看ApplicationContext，又会发现它继承了ListableBeanFactory，顾名思义，可以通过这个BeanFactory获取多个Bean 而ListableBeanFactory，继承的就是BeanFactory 现在再说一下一个加了@Bean注解的方法是如何注入类的 会先进在AnnotationConfigApplicationContext的构造函数 在这个函数里有两个主要过程，register注册和refresh初始化 在register里，把beanClass封装成了BeanDefinition 然后GenericApplicationContext的构造函数里，初始化了一个DefaultListableBeanFactory 就把刚刚封装好beanDefinition放进了初始化好的ConcurrentHashMap里，key是name(也可以是id)，value就是BeanDefinition 到这一步就注册好了，注意这里还没有创建Bean对象 refresh这里的工作比较多，简单的说就是先做了一些准备工作（比如准备了上下文环境context，准备了beanFactory，ConfigurableListableBeanFactory，准备BeanPostProcessor，准备监听器之类的） 然后在finishBeanFactoryInitialization根据之前注册好的beanDefinition，利用反射创建bean的实例，并初始化 然后因为这些context或者beanFactory最终都是实现了BeanFactory的接口，所以就可以通过BeanFactory里面的接口来getBean了 也因为AutowireCapableBeanFactory实现了BeanFactory，也可以@Autowire这样用了 都是从之前说的那个concurrentHashMap里面取的 AOP一般在日志啊，事务啊，或者封装返回值的时候用到AOP，减少系统重复代码 就在希望配置的类上加注解@Aspect，在方法前执行的加@Before，方法后执行的加@AfterReturning，用@Pointcut指定影响的路径 AOP是基于动态代理，如果要代理的对象实现了接口，就走的JDK Proxy，没有实现接口的，走的Cglib 走JDK Proxy的话有的时候会有问题，所以springboot2.0以后默认都用Cglib了，用的AspectJ 因为JDK Proxy是基于接口的，代理生成的对象只能赋值给接口，如果是个实现类，比如： 12@AutowiredUserServiceImpl userService; 那么就会报错 实现原理就是： 之前IOC提到了，在BeanFactory创建的时候，走Refresh方法，方法里面有一些准备工作，其中就有初始化了一些PostProcessor，如果开启了AOP，这里面就包括了AnnotationAwareAspectJAutoProxyCreator（这么长我肯定记不住，我就记ProxyCreator） 然后会在最后创建Bean对象时，会有一个拦截，看是否匹配了pointcut 如果匹配了，会生成一个代理对象，将代理对象返回给容器。这样以后getBean取的实际上就只是代理对象了。 向ProxyCreator返回真正的Bean实例，注册各种拦截器 循环依赖循环依赖主要有两种，一种是构造器的循环依赖，一种是属性（或者@autowired）的循环依赖 通过构造器的循环依赖是没办法的，只能通过代码的方式去避免 通过属性注入导致的循环依赖，spring是通过三级缓存来避免的 三级缓存在refrsh里面的finishBeanFactoryInitialization方法里，有个准备准备单例实例的方法preInstantiateSingletons，就是在这里实例化和初始化 这里面在getSingleton三级缓存，也就是三个map，一个对象的创建要分别经过这三个map，到二级的时候就把三级的缓存删掉，到一级到时候就把二级的缓存删掉，最后交还给容器的时候再把一级缓存删掉 三级：SingletonFactories 里面只有ObjectFactory，如果是构造器级的循环依赖，这个ObjectFactory都构建不起来，所以没法解决 二级：earlySingletonObjects 实例化了，但未初始化注入属性，但已经可以被拿去用了，解决了循环依赖的问题 一级：SingletonObjects 实例化且注入属性了 所以如果两个Bean，A、B属性级的循环依赖，在初始化的过程是这样的： A实例化后开始注入属性，也就是从二级缓存过了在准备写到一级缓存的时候，依赖了B B开始准备BeanFactory，进入了三级缓存 B根据三级缓存的BeanFactory实例化了，进入了二级缓存，因为B没有开始注入属性，所以不涉及依赖 A从二级缓存中取到了B，完成了注入属性，结束了A的Bean的实例化和初始化 该B初始化的时候，直接从二级缓存中取到已经实例化并初始化的earlySingletonObject 给B注入属性，因为A已经完成了，所以可以顺利完成了 事务隔离级别和之前说的Mysql是一样的，比Mysql多一种，就是和数据库事务隔离级别保持一致 事务传播支持当前事务： 当前存在，则加入；当前不存在，创建个新事务 当前存在，则加入；当前不存在，不以事务运行 当前存在，则加入；当前不存在，抛异常 不支持当前事务： 创建新事务，如果当前存在事务，给当前事务挂起 以非事务运行，如果当前存在事务，给当前事务挂起 以非事务运行，如果当前存在事务，抛异常 其他情况： 如果当前有事务，作为其嵌套事务；如果没有，创建新事务 自定义starter 创建名字为 xxx-spring-boot-starter 的启动器项目。 创建名字为 xxx-spring-boot-autoconfigure 的项目。 编写属性绑定类 xxxProperties. 编写服务类，引入 xxxProperties. 编写自动配置类XXXAutoConfiguration注入配置。 创建 spring.factories 文件，用于指定要自动配置的类。 启动器项目为空项目，用来引入 xxx-spring-boot-autoconfigure等其他依赖。 项目引入 starter，配置需要配置的信息。 代码样例： https://www.cnblogs.com/niumoo/p/11775009.html","link":"/2020/10/%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB%EF%BC%9Aspring/"},{"title":"面试突击：springcloud五大组件","text":"平时工作很多概念性的东西用不到，长时间不用吧，容易忘，但面试又确实是要问，只能复习面试的时候整理下来，也是再学习一遍。 真希望能找到一份，能把学习到的诸多理论知识变成实践的工作，而不是业务复杂，但技术不复杂的工作，嗨，加油吧。 ⚠️ 注意 本文仅为个人复习面试时的总结，并不全面，一些本人认为不重要或者已经牢牢掌握的内容并没有覆盖到，诸多口语化描述仅为便于自己理解并牢记，如需严谨权威的内容请去阅读：《Spring实战》 eurekaeureka是常用的注册中心，功能是让多个服务注册在注册中心，实现服务发现和故障转移的功能。 最基本的工作原理是： client启动后会定时从server拉取其他服务的信息 client同时也会定时向server发送自己的信息（名字、ip、端口） client就根据拉取到的信息互相调用 工作流程是： client在启动时，在DiscoveryClient的构造方法里面初始化了一个叫heartBeatExecutor的线程池 然后在initScheduleTasks方法里面，先创建了一个叫CacheRefreshThread的线程 这个线程以30秒为周期从server请求数据，通过CAS和本地保存的远端数据比较并替换 又初始化了一个叫heartBeatThread的线程 这个线程也以30秒为周期发送心跳数据给server，根据返回的状态码，如果是404，就向server发送instanceInfo来注册，如果是200，这次心跳就结束 server接受到instanceInfo之后，保存在concurentHashMap里，key是appName，value是一个Lease的一个包装类，这个类里面有instanceInfo的信息，有注册的时间，实例存活时间，上次更新时间等信息 自我保护机制因为可能由于网络原因，client并没有挂掉，但是server却收不到一个或多个client的心跳了，那么就会触发自我保护机制 自我保护机制是说，哪怕长时间都没有收到心跳，仍然不会将服务剔除，这是因为eureka遵循CAP原则中的AP，牺牲了C CAP原则C (一致性),A(可用性),P(分区容错性) 服务剔除如果关闭了自我保护机制，那么默认在90秒内，如果收到的心跳数少于： client数 * （60 / 心跳间隔时间，默认30） * 系数，默认0.85 那么就会根据一个随机数剔除过期的服务实例 RibbonRibbon是一个客户端负载均衡工具，用得最多的一般就是轮询吧，就是直接服务启动后的总请求次数%微服务集群总数量，余数就是负载到第几台服务器去，每次重启后总请求次数清零，通过自旋锁来确保能获取到正确的数 Ribbon默认提供了一些策略： 轮询 随机 先轮训，失败了重试 响应越快的实例权重越大，越被优先选择 过滤掉故障的实例，选并发量最小的实例 过滤掉被熔断降级的实例，选并发量最小的实例 默认，根据性能和可用性多重考虑选择实例 也可以自己写平衡策略，然后在注解@RibbonClient那里指定自己写的平衡策略就可以了 一般很少单独使用ribbon的吧，一般都直接用OpenFeign，OpenFeign里面集成了Ribbon OpenFeignOpenFeign的功能是简化微服务之间的调用，从http调用改为rpc调用，并且集成了ribbon，又解决了微服务环境下，多实例之间互相调用的负载均衡问题 原理大概是： OpenFeign会给加了@FeignClient的接口扫描出来，注册一个FactoryBean的实例 当spring调用的时候OpenFeign返回一个生成的动态代理的对象，拦截接口的执行 然后生成http请求模板去请求，拿到返回值以后再反序列化了返还给调用方 Hystrix因为现在微服务化了，调用链路变长，变长之后每一个调用链路理论上都有可能出问题，那出问题的可能性随着调用链路的增长就会变大 那调用链路中的一环出了问题，后面就会引起异常的蔓延，为了避免一处错误使得整个调用链路出问题，或者是为了让整个调用链路在高并发下有着更好的表现，Hytrix就应运而生 为了避免上述问题，hystrix主要做了以下四个工作 1. 线程池隔离Hystrix内部通过HystrixThreadPool.factory，用concurrentHashMap管理了多个线程池，key是HystrixThreadPoolKey，可以把它理解成一个资源或者对象。 请求同一个资源的线程都得进入这同一个线程池，这样同一时间的并发量再大，实际起作用的也就是线程池内数量的线程，如果超出了线程池的最大等待数量，就触发fallback降级。 有着显著的削峰效果，降低了服务的压力，这就是线程池隔离。 2. 信号量隔离信号量隔离就是Hystrix维护了一个最大信号数量，每次请求进来就会占用一个信号量，成功了就释放掉，也就相当于最大并发数吧。如果当前信号量达到了最大信号量，后续的请求全部触发fallback降级。 3. 服务降级也就是之前说的fallback。 不管是主动触发fallback，比如上面的线程池隔离的时候达到最大等待数了，还是信号量隔离达到最大信号量了，回由Hystrix主动触发降级也好。 还是因为微服务内部抛异常了/内部处理超时了等，触发了fallback。 这个服务降级本身就相当于，调用链路到fallback就不再往下走了，直接返回一个之前预设的值，这次请求就结束了 4. 服务熔断服务熔断就类似于会自我修复的保险丝一样，一旦这个系统fallback次数达到一定程度，那实际上也就说明当前这个服务已经超出它的工作能力了，就得让负载均衡分给别人了，大体流程位： 正常 看时间窗口内，失败次数的百分比，比如过去十秒内，失败次数达到了50%，触发熔断 熔断时所有请求直接fallback 等待一个时间后，进入半开放状态 在半开放状态下，放进来一个请求，看这次请求能否成功，如果成功，解除半开放状态，恢复正常；如果这次还失败了，那么结束半开放状态，继续熔断，再等待一个时间周期继续进入半开放状态 zuul &amp; gateway因为zuul连续跳票，所以Spring团队自己孵化出了Gateway项目，作用都是一样的，但是Gateway是异步非阻塞的，理论上性能更好一些，之前公司用的也是gateway gateway顾名思义，就是网关，主要干的事就是路由（route）、拦截（Filter）、统一处理（Handler），比如说： 现在微服务化了，一个项目可能会部署多个实例，每个实例要占用不同的端口，那调用方需要知道被调用方这么多具体的信息么，其实并不需要，调用方只需要知道网关的地址就可以了，由网关来分发请求 比如判断登陆状态，加了oauth2以后，每次请求有没有带token，不需要每个微服务都做一遍，只需要最前方的网关做了校验，非法请求就不会走到后面去 所以在网关着一层可以做一些更高层次的事情，比如流量过滤，合法性校验，监控，日志输出等 分布式事务两段式提交/使用消息中间件，由起始的微服务发消息并等待回调才算结束一个事务","link":"/2020/10/%E9%9D%A2%E8%AF%95%E7%AA%81%E5%87%BB%EF%BC%9Aspringcloud%E4%BA%94%E5%A4%A7%E7%BB%84%E4%BB%B6/"},{"title":"2020年度总结，2021新年展望","text":"2020年要结束了，2021年要开始了。 刚工作的时候，写下了 《3年经验程序员应该掌握什么技能》 的OneNote笔记。当有两年工作经验的时候，看当时的标准，觉得还有那么大的差距，基本不可能完成了。结果现在四年工作经验的时候，所幸，勉强算是完成并超越了当时的目标了吧。 虽然定下目标推迟完成了，但总比没有完成强。以前看了很多大神的博客，他们都有年度总结的习惯，即然现在我也开始正式写博客了，那我也要跟一波风。 先放个最大的收获！！！！ 2020年度回顾2020年是不平凡的一年，怕是要载入史册的一年。这一年里，新冠、脱欧、美国大选，诸多的事情，发生的地方离我很远，所造成的影响却又确切的体现在我日常生活中。 在这不平凡的一年中，平凡的我又是怎么度过的呢？ 我回顾了这一年，明明时间上这么近，但是回忆起来却仿佛已经过了很久很久了。 首先在年初，公司年会的时候，我得知我主要负责的项目：售电系统，在大方向上要被放弃掉，进入维护阶段了，基本只会做小的调整，我要被并入另一个产品线了——基本相当于降级，从owner降为普通的coder 接着，新冠来了。过年的时候还似乎没啥事，虽然武汉封城了，但是各地似乎还不是很重视，跟女朋友家人吃了年夜饭，还带女朋友回了洛阳，只用登记一下就行了，年过的还算完整，可惜没怎么跟朋友聚，心心念念的金鼎大盘鸡也没吃到。过完年，经历了很短暂的居家办公后，又回到了公司，一切好像变了，又好像没变，只是人人脸上都多了一副口罩而已，工作也进入到了新的产品线中 女朋友这时候，因为公司太XX，疫情最严重的时候不顾员工有没有口罩，非要去上班，辞职了，并且从2月份起到今年结束，基本可以说没有工作，也不打算工作了，没有了收入 三四月份的时候，往年这时候都是说调薪/定级/旅游的事了，公司受疫情冲击比较大，尤其是母公司，所以安安静静的度过了 到年中，也就是五六月份的时候，开始上半年的ODP考核，上次我拿了A，这次要是再拿A的话就该调级，涨工资了。可是又是89点几，没能拿A，每次没评到A的都是89点几，唉……有的同事还拿了C，这次非但没有涨薪，还降薪了 这时候我回顾了一下在这家公司的两年，我以初级程序员T1-3的评级入职，工作了两年后，承担了更多的工作量，最高做到过一个主营产品线的owner，但是定级还是T1-3，公司福利一降再降，工资上特调无望，普调也一次都没轮到我（明明其他同事有涨薪的）。更重要的是年会上，总公司大张旗鼓的要求子公司盈利，可是以我的了解，那怎么可能盈利的了嘛，这个市场我是根本不看好的，有这么多因素影响，我觉得是离职的时候了。所以七月份的时候提出了离职，八月十号正式离开了工作了两年的公司，和女朋友一起失业在家 回顾这家公司的工作经历，我真的觉得对我帮助太大了：公司的技术栈新又全，流程规范，也非常幸运的，应该可以说得到了直属上司明乾的器重，在各方面对我的提升都非常大，并且在这里认识了很多能作为朋友的同事，让孤零零来到成都的我可以说是有了朋友，可以不再说在成都一个人都不认识了，真好 由于是计划内离职，所以开启了一段非常快乐的放假时间。从8月1号就开始了，原计划是8月玩一个月，9月学一个月，9月底十月去找工作。可是计划赶不上变化，9月份又玩过去了，甚至十月上旬中旬也都在玩，十月下旬才开始真正的把掌握的技能梳理了一下，十一月份开始找工作 离职以后别提有多开心了，尤其是我7月31号最后一天岗，8月1号突然前公司开始996了，我这感觉真是飞起，爽到，可惜的是玩也没能好好玩，我可真是个三分钟热度的人，很多计划中要打通的游戏最终都没能玩通，真可惜！！！ 十月底开始逐步走上正轨开始复习了以后，十一月开始投简历了，我原计划是把工作机会氛围三档：10k-15k的——练手、大公司——拼一枪、15k以上的——保底。先去练手级的涨经验（谁让你们对这个年份经验的程序员只开这么点工资，但凡你开的薪资高点就不会沦为经验宝宝了，尊重是双向的，想捡漏就得被刷经验），然后去大厂拼一枪试一试，实在不行就去高薪小厂拿保底offer 第一周，我面了第一档大概有五家公司，10-15k起的岗位，基本都能拿到offer。但是要么是我当场拒掉了，要么是我狮子大开口使劲要价，最终一个正式的offer都没有。尽管没有正式offer，但是一方面见了一些面试题，另一方面锻炼了我的心态（我是个很容易紧张，甚至会导致结巴的菜鸡），再有就是也磨练了一下我的面试技巧，比如如何在回答问题的时候梳理思路，如何谈判offer抬薪资之类的，收获挺大的。第一周过去后，我空前的膨胀，我觉得我已经做好了要面大厂的准备了 第二周，开始给大厂投简历，在家也继续复习，顺便也学习一下新知识，刷刷题。可是很快，两周就过去了，在BOSS上投的简历有如石沉大海，50%左右的大公司甚至连我的简历都没有收；30%的hr收了，但是一点动静都没有；20%的hr收了，告诉我如果合适的话，会跟我联系来面试 于是就这么两周过去了，这两周里面就一个同城艺龙的面试，很可惜第二面遇到了个面试官，我个人觉得他是挺没水平的，问的问题都没法让我get到他想要问啥，并且问的特别离谱，学院派都不如。草草的结束了二面，后面再也没有面试了，心态崩了 第四周，这已经马上要找一个月工作了，我一个正式offer都没有，大厂连面试机会都不给我，我开始好好审视自己。觉得确实金九银十我没有给到足够的尊重，很多大厂的hr最后活跃时间都是十月底，自己可能没希望进大厂了。就开始调整策略，一方面给所有活跃的大厂hr投简历，哪怕这个公司别的hr我投过了我还继续投；另一方面开始投15k以上的小厂，真的十分沮丧，准备来年金三银四、金九银十再战大厂 还好小厂的面试机会还挺多的，随着高密度的投送简历，面试机会陆陆续续的来了，【并且，之前投大厂两周没有反应，可能是因为大厂流程比较完备和复杂，导致环节比较多，简历筛选的时间长，终于两周过去了，大厂开始邀请我面试啦！！！】第四周的周一我甚至接了一下午约面试的电话，一开始我还心里记一下时间点，再后来实在是记不住了，用notion捋捋个时间表出来上图其实已经去掉了很多公司了，还有一些是临时电话打进来的没加进去。比如实际上12月4号还接了俩顺丰的电话面试，一天面了6场。有一个是刚面完腾讯云，走在路上顶着寒风还下着小雨，顺丰北京就打电话过来了，面了快一个小时，面完了继续去的H3C。基本每天都是早上一个，下午两个，晚上一个的状态。很累，但也很充实，第一次让我觉得大厂离我这么近，似乎只要踮踮脚，蹦一蹦，就能摸得到 经历了最累的一周以后，慢慢开始有收获了。因为大厂正在面，所以15k起的小厂我就统一报价18k——你让我放弃大厂的机会来你小厂，你肯定得给我经济上的补偿吧——所以小厂一个offer都没拿到（其实也合理，大厂才给得起这么高工资嘛）。只是小厂即然只想开15，那你标15-30也挺没意思的，咋不标个15-5000呢——每个月给你发一张彩票，能不能拿到500W全靠自己，这比标30，还有一定的可能性。而大厂这边，顺利的拿到了顺丰和ThoughtWorks的offer，价格是一样的。知乎这边我想要的话也能拿，只是因为知乎这边给offer给的不爽快，并且还要转语言至golang，所以最终没有接他们的offer。 这里还要点名一个喜马拉雅，面试流程问题很大。我二面过了以后，微信上hr给我说下一面会有hr小姐姐跟我联系的，然后三面是个男的，男的就男的吧，谁说不能有hr小哥哥呢？我就以为他是hr，应该不懂技术，所以在他问我项目的时候，我一直试图用非专业人员也能听得懂的话去解释。他还问了技术细节，让我很惊讶——喜马拉雅的hr懂得好多啊，真牛逼👍。结果最后结束面试的时候他问我，还有没有要问他的。我就说没有了，前面一面二面的时候已经问了挺多的了，不需要再问了。他很意外，他说他是一面的面试官。我也懵了，我一直以为他是hr。后面喜马拉雅也没再联系我了，没联系就没联系吧，无所谓了，当时手里已经有顺丰和tw的offer了。 手握顺丰和tw的时候，我真的感觉人都要起飞了，我看到我站在分叉路口，一边是顺丰的大门，另一边是TW的大门，我不光伸手就能推开任意一扇大门，我甚至还必须拒掉一家！！！我真的很开心，两个月前我仰望的目标，现在我竟然拥有挑选的资格了！虽然顺丰和tw不是bat级别的大厂，但比我之前听都没听说过的，过几年还不一定在不在的小厂来说，平台已经好太多了，真的感觉距离人生重要阶段的里程碑靠近了一大步的感觉，我飘了。这两个offer，我最终选择了顺丰：其一，顺丰的事业线很好，年营收三四个亿，上一家公司就是因为盈利的问题困扰着我，在这不会有这个问题，并且按理说都年营收三四个亿了，用户量、数据量应该也不会小，对我来说肯定有很大的技术方面的提升。其二，顺丰在我要offer的时候非常爽快，薪资当场就答应，感觉合作很愉快，感觉财大气粗的，薪资上应该也有比较好的提升空间。而tw，最后古希进去了，真的很好，简直是梦想中的公司，以后养老还是应该去外企！！！唯一缺点就是说白了就是个大外包，对技术的提升也许有限。我为了技术提升的可能性，最终选择了顺丰 顺丰给的offer是18号入职。这次面试最大的两家公司，美团二面结束后就没有反馈了，让我很惊讶，我觉得我二面面的还挺好的，不知道为什么就挂了，真的很遗憾。另外就是蚂蚁，11号三面，收到的反馈是三面过了，可是后面的面试呢？怎么还没来？到底要不要去顺丰？真的很纠结，唉。毕竟年底了，这是我最后一个offer了，我要是拒了安心等蚂蚁，我要是没过，就真的完了。成都的大互联网公司我都投了，马上要过年了真的没有机会了。真的真的很纠结很纠结，但是没有办法，我就一打工仔，我承担不起失去进大厂机会这样的风险，我只能先去顺丰入职了。 顺丰的同事人真的很好，在这里真的很有归属感，项目也不错，虽然也有一定的发展上的危机，但是整体的发展前景我是很看好的。可惜，这里的代码，在我个人看来有很大的问题：1. 可能是由于没有架构师给定架构，这里代码业务目录非常非常之混乱，各业务的controller、service、bean都杂糅在一起，阅读起来很艰难，有统一异常处理，但基本没人用，没有统一返回值包装处理。项目架构非常之简单，就单机springboot。2. 项目管理有问题，明明是有sonar的，但肯定没看，git代码随便提，没有checkstyle或者findbugs这样的工具提前扫描，没有硬性的代码质量管控，这就导致了每个人都提点垃圾代码，整个项目就变成垃圾堆了。 3. 程序员开发理念有问题，service级直接返回包装类BaseResult，我根本没办法从service的接口得知返回值的类型，必须看代码实现，那请问接口的意义在哪？我们当初为什么要定义接口？不就是不需要去关心接口的实现了。可是这么一搞不看接口实现根本就不知道在返回啥，甚至还有getUserByUserId的接口，实现是return null这样的，从2019年开始就有了，而getUserById(Long id)这样的接口传id返回值竟然也不全，很多重要是属性竟然没有，我得先去这个接口查User对象，然后根据对象的某个属性再去service的getUser(某属性)这样的接口才能查出来相对完整的User对象，这谁想得到？这谁设计的？我真是服气，代码看的我真的头很痛。还有诸多问题，这里不再赘述了，每个人的设计理念不同，也许现在这样的代码正是因为诸多我不知道的原因而妥协的结果，我不知道前因后果而妄下结论是不对的。但是不看原因，只看现状的话，我的感觉就是，哪怕阿里的面试后面挂了，我仍然要离开顺丰，去求知乎或者tw要回offer，再或者再去找工作，也不应该在这继续待下去了，不适合我，和我的发展前景不符。 所幸，阿里的面试经过漫长的流程，终于是过了。在12月31日这天，收到了正式的offer，算是给今年画上了最圆满的句号 进阿里真的意味着很多：意味着简历有大厂的工作经验背书，35岁以后有保障了；意味着可以去学大厂的技术栈，技术深度来提升自己的硬实力；意味着能看到更规范更先进的代码规约、工作流程来提升自己的软实力；意味着进去结交的同事、朋友的水平更高，万一将来抱大腿创业一波起飞；意味着过年回去的时候，可以不自卑的跟华为、B站大佬坐在一起；意味着工资帽有了很大的提升，以后再跳槽要高工资有了底气……意味着太多东西，所幸，都得到了 2021新年展望2020年末，给了我很高的起飞的平台，在这里也简单的给2021定下一些目标，看看在年底回顾的时候，到底哪些完成了，哪些没完成 感情上要有定论，有问题的话一定不能把问题带到下一年，今年必须解决 为了健康，一定要减肥，要运动，不要求每天，但是一定要有计划的开始！！！你已经脂肪肝，胆囊息肉，尿酸高，血压有一点高了，人生美好的篇章才刚开始，你不想活了？？？？？？？ 房子稍微处理一下，让爸妈姐姐定期过来看我，我给钱，现在心疼钱，以后有钱都没法再花这个钱了，多跟父母姐姐联系，以后定下来，每天或者每周打电话/视频！！！ 在蚂蚁顺利转正 一个季度看一本技术书（如果一本有快一千页那种，可以适当放宽时间，做到问心无愧即可） 每天上班时候抽出半小时到一小时划水，刷算法 下班时间复刻蚂蚁的技术栈，自己搭一套，如果以后去小公司当架构了，你得能把全流程打通！ 把蚂蚁的工作流程梳理成文档，自己做小项目时严格执行 多写博客，写博客最主要的目的是把虚无缥缈是思路，用严谨的文字梳理下来，一方面梳理的过程就是二次学习的过程，另一方面以后自己忘了，来博客有查阅的依据，最后才是也许能帮到一些人，多写精品博客，垃圾博文就别写了，或者用一篇文章，垃圾全扔里面","link":"/2020/12/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93%EF%BC%8C2021%E6%96%B0%E5%B9%B4%E5%B1%95%E6%9C%9B/"},{"title":"CF全球节点","text":"103.22.200.0/22#对电信最友好162.159.36.6#对联通最友好104.16.0.0/12#对移动最友好我已解析好的cname地址：ip.s.s1-cdn.me 173.245.48.1#线路 最快节点 最慢节点 平均响应电信 浙江湖州139ms 湖北武汉285ms 176.5ms联通 江苏徐州152ms 河南新乡333ms 224.8ms移动 广东深圳258ms 江苏徐州327ms 292.5ms分析#活生生的cf品质不推荐用103.22.200.1#线路 最快节点 最慢节点 平均响应电信 江苏镇江93ms 广东广州210ms 133.6ms联通 江苏徐州109ms 河南新乡257ms 186.4ms移动 广东深圳71ms 广东深圳103ms 87ms分析：搜刮到的唯一亚洲节点，电信效果最好移动联通最燃看得过去看是有更好的选择141.101.64.1#线路 最快节点 最慢节点 平均响应电信 河北保定163ms 浙江绍兴264ms 230.4ms联通 河南郑州224ms 黑龙江哈尔滨461ms 357.7ms移动 广东深圳201ms 广东深圳287ms 236.7ms分析#活生生的cf品质不推荐用197.234.240.1#线路 最快节点 最慢节点 平均响应电信 河北保定395ms 江苏宿迁515ms 452.4ms联通 江苏徐州448ms 河南新乡542ms 498.3ms移动 广东深圳377ms 广东深圳411ms 392ms分析#南非节点本来受众主题不一样延迟差点可以接受，有南非用户的人可以考虑162.158.0.1#线路 最快节点 最慢节点 平均响应电信 江西吉安400ms 湖北宜昌533ms 482.6ms联通 江苏宿迁338ms 浙江嘉兴505ms 390.9ms移动 广东深圳136ms 江苏徐州219ms 177.5ms分析#澳大利亚节点，国内用户可以不考虑104.16.0.1#线路 最快节点 最慢节点 平均响应电信 浙江湖州142ms 新疆哈密230ms 177.6ms联通 广东深圳168ms 山东济南309ms 217.4ms移动 广东深圳21ms 江苏徐州77ms 41ms分析#综合性能比较好的一个了移动电信的用户可以考虑联通得绕路104.24.106.196#线路 最快节点 最慢节点 平均响应电信 江苏镇江148ms 上海229ms 174.2ms联通 福建福州166ms 黑龙江哈尔滨258ms 200.8ms移动 广东深圳127ms 江苏徐州331ms 215.7ms分析#综合情况比较好的节点联通电信用户可以考虑162.159.36.6#线路 最快节点 最慢节点 平均响应电信 上海137ms 浙江绍兴254ms 177.3ms联通 浙江嘉兴146ms 山东济南224ms 190.6ms移动 广东深圳14ms 广东深圳79ms 46.5ms分析#三网综合性能最好的节点了，不想折腾的可以直接把这一个节点直接解析上172.64.78.78#线路 最快节点 最慢节点 平均响应电信 江苏镇江135ms 四川绵阳236ms 175.9ms联通 广东深圳162ms 江苏徐州372ms 222.9ms移动 广东深圳26ms 江苏徐州74ms 54ms分析#比较综合的节点，移动电信的用户可以考虑104.18.66.137#线路 最快节点 最慢节点 平均响应电信 江苏镇江150ms 新疆哈密231ms 176.9ms联通 浙江嘉兴152ms 山东济南336ms 230.7ms移动 广东深圳24ms 江苏徐州77ms 43ms分析#比较综合的节点，移动电信的用户可以考虑162.159.208.103#线路 最快节点 最慢节点 平均响应电信 江苏泰州141ms 浙江金华281ms 180.0ms联通 浙江嘉兴160ms 山东济南308ms 210.8ms移动 广东深圳69ms 广东深圳94ms 81.5ms分析#活生生的cf品质，移动会好上那么一点点但是有更好的选择104.18.33.172#线路 最快节点 最慢节点 平均响应电信 江苏徐州144ms 新疆哈密229ms 175.7ms联通 福建福州154ms 黑龙江哈尔滨285ms 204.5ms移动 广东深圳69ms 广东深圳75ms 72ms分析#活生生的cf品质，不推荐 172.64.25.25 英国172.69.184.0/22 菲律宾162.158.136.0/22162.158.228.0/22172.69.188.0/22 立陶宛103.22.202.0/24 香港103.22.203.0/24108.162.222.0/24108.162.223.0/24162.158.176.0/24162.158.177.0/24162.158.178.0/24162.158.179.0/24172.68.248.0/22172.69.96.0/22172.69.176.0/22173.245.62.0/24103.31.4.0/23 台北162.158.224.0/22162.158.240.0/22172.69.72.0/22 澳门172.69.80.0/22 柬埔寨108.162.208.0/24 加拿大108.162.240.0/24108.162.241.0/24162.158.144.0/24162.158.145.0/24162.158.146.0/24162.158.147.0/24172.69.156.0/22172.69.212.0/22172.69.216.0/22108.162.214.0/24 洛杉矶108.162.215.0/24141.101.72.0/24162.158.56.0/22172.68.44.0/22172.68.208.0/22172.69.32.0/22173.245.48.0/24108.162.216.0/24 芝加哥108.162.217.0/24141.101.73.0/24162.158.72.0/22172.68.56.0/24172.68.57.0/24172.68.58.0/24172.68.59.0/24162.158.140.0/24 凤凰城162.158.141.0/24162.158.142.0/24162.158.143.0/24108.162.218.0/24 纽瓦克108.162.219.0/24162.158.60.0/22173.245.52.0/24 纽约108.162.220.0/24 达拉斯108.162.221.0/24141.101.74.0/24172.69.64.0/21162.158.252.0/22 圣何塞172.68.80.0/22172.68.132.0/22172.68.140.0/22172.68.188.0/22172.69.16.0/22162.158.244.0/22 拉斯维加斯108.162.226.0/24 日本东京108.162.227.0/24103.22.200.0/23162.158.4.0/22162.158.116.0/22172.69.108.0/22172.69.152.0/22 日本大阪108.162.228.0/24 法国巴黎141.101.66.0/24141.101.67.0/24141.101.68.0/24141.101.69.0/24108.162.229.0/24141.101.88.0/22162.158.192.0/24162.158.193.0/24162.158.194.0/24162.158.195.0/24172.69.224.0/22162.158.120.0/24 迈阿密162.158.121.0/24162.158.122.0/24162.158.123.0/24108.162.210.0/24108.162.211.0/24108.162.212.0/24108.162.213.0/24108.162.236.0/24 亚特兰大108.162.237.0/24108.162.238.0/24162.158.124.0/22162.158.184.0/24162.158.185.0/24162.158.186.0/24162.158.187.0/24172.68.32.0/22 丹佛172.68.36.0/22 圣路易斯172.68.52.0/22 波士顿108.162.243.0/24 西雅图108.162.244.0/24108.162.245.0/24108.162.246.0/24162.158.104.0/24162.158.105.0/24162.158.106.0/24162.158.107.0/24162.158.76.0/22 阿什本172.68.64.0/22172.69.60.0/22173.245.54.0/24188.114.104.0/24172.68.148.0/22 堪萨斯172.68.204.0/22 底特律172.68.172.0/22 波兰特172.69.168.0/22 休斯顿172.69.40.0/22 盐湖城172.68.228.0/22 圣地亚哥172.68.68.0/22 宾法尼西亚费城172.68.72.0/22 田纳西州纳什维尔172.68.76.0/22 佛罗里达州坦帕172.68.88.0/22 内布拉斯加州奥马哈172.69.4.0/22 德克萨斯州麦卡伦172.69.48.0/22 宾法尼西亚州匹兹堡172.69.88.0/22 印第安纳州印第安纳波利斯172.69.140.0/22 加利福尼亚州萨克拉门托172.69.180.0/22 佛罗里达州塔拉哈西172.69.196.0/22 田纳西州孟菲斯172.69.208.0/22 佛罗里达州杰克逊维尔108.162.247.0/24 澳大利亚108.162.248.0/24108.162.249.0/24108.162.250.0/24162.158.0.0/22172.68.0.0/22172.68.84.0/22172.68.116.0/22108.162.252.0/24 韩国141.101.82.0/24141.101.83.0/24141.101.84.0/24141.101.85.0/24162.158.188.0/24162.158.189.0/24162.158.190.0/24162.158.191.0/24108.162.253.0/24 美国明尼苏达州明尼阿波利斯162.158.212.0/22108.162.254.0/24 旧金山141.101.64.0/24 荷兰141.101.65.0/24141.101.75.0/24141.101.76.0/24141.101.77.0/24141.101.104.0/24162.158.108.0/22172.69.52.0/22141.101.70.0/24 英国伦敦141.101.71.0/24141.101.98.0/24141.101.99.0/24141.101.105.0/24141.101.106.0/24141.101.107.0/24162.158.152.0/22162.158.156.0/22172.64.16.0/20172.69.124.0/22188.114.105.0/24162.158.32.0/22 英国曼彻斯底172.69.172.0/22 英国爱丁堡162.158.36.0/24 爱尔兰162.158.37.0/24162.158.38.0/24162.158.39.0/24172.69.120.0/22162.158.82.0/24 德国法兰克福162.158.83.0/24162.158.84.0/24162.158.85.0/24162.158.86.0/24162.158.87.0/24162.158.88.0/24162.158.89.0/24162.158.90.0/24162.158.91.0/24162.158.92.0/24162.158.93.0/24162.158.94.0/24162.158.95.0/24162.158.112.0/24 德国柏林162.158.113.0/24162.158.114.0/24162.158.115.0/24162.158.200.0/22 德国汉堡172.68.108.0/22 德国慕尼黑162.158.148.0/22 瑞士162.158.180.0/22 瑞典172.68.180.0/22162.158.96.0/24 阿联酋162.158.97.0/24162.158.98.0/24162.158.99.0/24141.101.95.0/24 捷克141.101.96.0/24141.101.97.0/24172.68.212.0/22162.158.100.0/24 波兰华沙162.158.101.0/24162.158.102.0/24162.158.103.0/24172.68.136.0/22141.101.100.0/22 智利172.68.112.0/22141.101.108.0/24 哥伦比亚141.101.109.0/24141.101.110.0/24141.101.111.0/24172.69.204.0/22162.158.8.0/24 卡塔尔多哈162.158.9.0/24162.158.10.0/24162.158.11.0/24162.158.12.0/22 科威特162.158.16.0/22 罗马尼亚172.69.148.0/22162.158.20.0/22 法国马赛172.69.220.0/22 法国162.158.24.0/24 新加坡162.158.25.0/24162.158.26.0/24162.158.27.0/24162.158.160.0/20172.68.144.0/22172.69.132.0/22162.158.28.0/24 阿曼162.158.29.0/24162.158.30.0/24162.158.31.0/24162.158.40.0/24 肯尼亚162.158.41.0/24162.158.42.0/24162.158.43.0/24162.158.44.0/24 印度162.158.45.0/24162.158.46.0/24162.158.47.0/24162.158.48.0/24162.158.49.0/24162.158.50.0/24162.158.51.0/24162.158.52.0/24162.158.53.0/24162.158.54.0/24162.158.55.0/24172.68.160.0/22172.69.104.0/22162.158.128.0/22 埃及162.158.132.0/24 丹麦162.158.133.0/24162.158.134.0/24162.158.135.0/24162.158.196.0/24 意大利米兰162.158.197.0/24162.158.198.0/24162.158.199.0/24188.114.100.0/24188.114.101.0/24188.114.102.0/24188.114.103.0/24172.68.196.0/22 意大利罗马172.68.48.0/22 奥地利172.69.0.0/22162.158.208.0/22 保加利亚172.68.60.0/22 希腊172.69.56.0/22162.158.220.0/22 挪威162.158.232.0/22 比利时162.158.236.0/22 芬兰162.158.248.0/22 乌克兰172.68.236.0/22172.68.4.0/22 泰国172.68.104.0/22172.68.232.0/22172.68.240.0/22172.68.8.0/22 俄罗斯172.68.12.0/22172.68.244.0/22172.68.16.0/20 巴西圣保罗188.114.96.0/24188.114.97.0/24188.114.98.0/24188.114.99.0/24172.68.216.0/22 巴西里约热内卢172.68.40.0/22 安哥拉172.68.96.0/22 巴拿马172.68.92.0/22 西班牙188.114.106.0/24188.114.107.0/24188.114.108.0/24188.114.109.0/24188.114.110.0/24188.114.111.0/24172.68.100.0/22 葡萄牙172.68.120.0/22 库拉索172.68.124.0/22 亚美尼亚172.68.128.0/22 吉布提172.68.152.0/22 塞尔维亚172.68.176.0/22 厄瓜多尔172.68.184.0/22 南非172.69.112.0/22197.234.240.0/22172.68.200.0/22 斯里兰卡172.68.220.0/22 克罗地亚172.68.224.0/22 匈牙利172.69.76.0/22 尼泊尔172.69.84.0/22 黎巴嫩172.69.92.0/22 毛里求斯172.69.100.0/22 伊拉克172.69.116.0/22 土耳其172.69.128.0/22 以色列172.69.136.0/22 爱沙尼亚172.69.144.0/22 冰岛172.69.164.0/22 墨西哥172.69.192.0/22 拉脱维亚172.69.200.0/22 摩尔多瓦 更新ipv4#173.245.48.0/20103.21.244.0/22103.22.200.0/22103.31.4.0/22141.101.64.0/18108.162.192.0/18190.93.240.0/20188.114.96.0/20197.234.240.0/22198.41.128.0/17162.158.0.0/15104.16.0.0/12172.64.0.0/13131.0.72.0/22ipv6#2400:cb00::/322606:4700::/322803:f800::/322405:b500::/322405:8100::/322a06:98c0::/292c0f:f248::/32非官方渠道获取ipv4#1.0.0.0/241.1.1.0/248.6.112.0/248.6.144.0/248.6.145.0/248.6.146.0/248.9.230.0/248.9.231.0/248.10.148.0/248.14.199.0/248.14.201.0/248.14.202.0/248.14.203.0/248.14.204.0/248.17.205.0/248.18.50.0/248.18.194.0/248.21.8.0/248.35.57.0/248.35.58.0/248.35.59.0/248.36.216.0/248.36.217.0/248.36.218.0/248.36.219.0/248.36.220.0/248.37.41.0/248.37.43.0/248.38.147.0/248.38.148.0/248.38.149.0/248.38.172.0/248.39.6.0/248.39.18.0/248.39.125.0/248.39.126.0/248.39.127.0/248.39.201.0/248.39.202.0/248.39.203.0/248.39.204.0/248.39.205.0/248.39.206.0/248.39.207.0/248.39.212.0/248.39.213.0/248.39.214.0/248.39.215.0/248.40.26.0/248.40.27.0/248.40.28.0/248.40.29.0/248.40.30.0/248.40.31.0/248.40.107.0/248.40.111.0/248.40.140.0/248.41.5.0/248.41.6.0/248.41.7.0/248.41.36.0/248.41.37.0/248.41.39.0/248.42.51.0/248.42.52.0/248.42.54.0/248.42.55.0/248.42.161.0/248.42.164.0/248.42.172.0/248.42.245.0/248.43.121.0/248.43.122.0/248.43.123.0/248.43.224.0/248.43.225.0/248.43.226.0/248.44.0.0/248.44.1.0/248.44.2.0/248.44.3.0/248.44.6.0/248.44.58.0/248.44.59.0/248.44.60.0/248.44.61.0/248.44.62.0/248.44.63.0/248.45.41.0/248.45.42.0/248.45.43.0/248.45.44.0/248.45.45.0/248.45.46.0/248.45.47.0/248.45.97.0/248.45.100.0/248.45.101.0/248.45.102.0/248.45.108.0/248.45.111.0/248.45.144.0/248.45.145.0/248.45.146.0/248.45.147.0/248.45.151.0/248.46.113.0/248.46.114.0/248.46.115.0/248.46.116.0/248.46.117.0/248.46.118.0/248.46.119.0/248.47.9.0/248.47.12.0/248.47.13.0/248.47.14.0/248.47.15.0/248.47.69.0/248.47.71.0/248.48.130.0/248.48.132.0/248.48.133.0/248.48.134.0/2423.227.38.0/2323.227.62.0/2364.68.192.0/2466.235.200.0/24103.22.200.0/23103.22.203.0/24103.31.4.0/23104.16.0.0/20104.16.0.0/12104.16.16.0/20104.16.32.0/20104.16.48.0/20104.16.64.0/20104.16.80.0/20104.16.96.0/20104.16.112.0/20104.16.128.0/20104.16.144.0/20104.16.160.0/20104.16.176.0/20104.16.192.0/20104.16.208.0/20104.16.224.0/20104.16.240.0/20104.17.0.0/20104.17.16.0/20104.17.32.0/20104.17.48.0/20104.17.64.0/20104.17.80.0/20104.17.96.0/20104.17.112.0/20104.17.128.0/20104.17.144.0/20104.17.160.0/20104.17.176.0/20104.17.192.0/20104.17.208.0/20104.17.224.0/20104.17.240.0/20104.18.0.0/20104.18.16.0/20104.18.32.0/20104.18.48.0/20104.18.64.0/20104.18.80.0/20104.18.96.0/20104.18.112.0/20104.18.128.0/20104.18.144.0/20104.18.160.0/20104.18.176.0/20104.18.192.0/20104.18.208.0/20104.18.224.0/20104.18.240.0/20104.19.0.0/20104.19.16.0/20104.19.32.0/20104.19.48.0/20104.19.64.0/20104.19.80.0/20104.19.96.0/20104.19.112.0/20104.19.128.0/20104.19.144.0/20104.19.160.0/20104.19.176.0/20104.19.192.0/20104.19.208.0/20104.19.224.0/20104.19.240.0/20104.20.0.0/20104.20.16.0/20104.20.32.0/20104.20.48.0/20104.20.64.0/20104.20.80.0/20104.20.96.0/20104.20.112.0/20104.20.128.0/20104.20.144.0/20104.20.160.0/20104.20.176.0/20104.20.192.0/20104.20.208.0/20104.20.224.0/20104.20.240.0/20104.22.0.0/20104.23.96.0/20104.23.112.0/20104.23.128.0/20104.23.192.0/20104.23.240.0/22104.24.0.0/20104.24.16.0/20104.24.32.0/20104.24.48.0/20104.24.64.0/20104.24.80.0/20104.24.96.0/20104.24.112.0/20104.24.128.0/20104.24.144.0/20104.24.160.0/20104.24.176.0/20104.24.192.0/20104.24.208.0/20104.24.224.0/20104.24.240.0/20104.25.0.0/20104.25.16.0/20104.25.32.0/20104.25.48.0/20104.25.64.0/20104.25.80.0/20104.25.96.0/20104.25.112.0/20104.25.128.0/20104.25.144.0/20104.25.160.0/20104.25.176.0/20104.25.192.0/20104.25.208.0/20104.25.224.0/20104.25.240.0/20104.26.0.0/20104.27.0.0/20104.27.16.0/20104.27.32.0/20104.27.48.0/20104.27.64.0/20104.27.80.0/20104.27.96.0/20104.27.112.0/20104.27.128.0/20104.27.144.0/20104.27.160.0/20104.27.176.0/20104.27.192.0/20104.27.208.0/20104.27.240.0/22104.28.0.0/20104.28.16.0/20104.28.32.0/20104.28.48.0/20104.28.64.0/20104.28.80.0/20104.28.96.0/20104.28.112.0/20104.28.128.0/20104.28.144.0/20104.28.160.0/20104.28.176.0/20104.28.192.0/20104.28.208.0/20104.28.224.0/20104.28.240.0/20104.31.0.0/20104.31.16.0/20104.31.64.0/20104.31.80.0/20104.31.112.0/22104.31.128.0/20104.31.144.0/20104.31.160.0/20104.31.176.0/20104.31.192.0/20104.31.208.0/20104.31.224.0/20104.31.240.0/20108.162.208.0/24108.162.210.0/24108.162.211.0/24108.162.212.0/24108.162.213.0/24108.162.214.0/24108.162.215.0/24108.162.216.0/24108.162.217.0/24108.162.218.0/24108.162.219.0/24108.162.220.0/24108.162.221.0/24108.162.223.0/24108.162.226.0/24108.162.227.0/24108.162.228.0/24108.162.229.0/24108.162.235.0/24108.162.236.0/24108.162.237.0/24108.162.238.0/24108.162.239.0/24108.162.240.0/24108.162.241.0/24108.162.242.0/24108.162.243.0/24108.162.244.0/24108.162.245.0/24108.162.246.0/24108.162.247.0/24108.162.248.0/24108.162.249.0/24108.162.250.0/24108.162.252.0/24108.162.253.0/24141.101.64.0/24141.101.65.0/24141.101.66.0/24141.101.67.0/24141.101.68.0/24141.101.69.0/24141.101.70.0/24141.101.71.0/24141.101.72.0/24141.101.73.0/24141.101.74.0/24141.101.75.0/24141.101.76.0/23141.101.82.0/24141.101.83.0/24141.101.84.0/24141.101.85.0/24141.101.88.0/22141.101.94.0/24141.101.95.0/24141.101.96.0/24141.101.97.0/24141.101.98.0/24141.101.99.0/24141.101.100.0/22141.101.104.0/24141.101.105.0/24141.101.106.0/24141.101.107.0/24141.101.108.0/24141.101.109.0/24141.101.110.0/24141.101.112.0/20141.101.112.0/23141.101.114.0/23141.101.120.0/22162.158.0.0/22162.158.4.0/22162.158.8.0/24162.158.9.0/24162.158.10.0/24162.158.11.0/24162.158.12.0/22162.158.16.0/22162.158.20.0/22162.158.24.0/23162.158.24.0/24162.158.25.0/24162.158.26.0/24162.158.27.0/24162.158.28.0/24162.158.29.0/24162.158.30.0/24162.158.32.0/22162.158.36.0/24162.158.37.0/24162.158.38.0/24162.158.39.0/24162.158.40.0/24162.158.41.0/24162.158.42.0/24162.158.44.0/22162.158.48.0/24162.158.49.0/24162.158.50.0/24162.158.52.0/22162.158.52.0/24162.158.53.0/24162.158.54.0/24162.158.55.0/24162.158.56.0/22162.158.60.0/22162.158.72.0/22162.158.76.0/22162.158.80.0/23162.158.82.0/23162.158.84.0/22162.158.88.0/21162.158.96.0/24162.158.97.0/24162.158.98.0/24162.158.99.0/24162.158.100.0/24162.158.101.0/24162.158.102.0/24162.158.103.0/24162.158.104.0/24162.158.105.0/24162.158.106.0/24162.158.107.0/24162.158.108.0/22162.158.112.0/24162.158.113.0/24162.158.114.0/24162.158.116.0/22162.158.120.0/24162.158.121.0/24162.158.122.0/24162.158.123.0/24162.158.124.0/22162.158.128.0/22162.158.132.0/24162.158.133.0/24162.158.134.0/24162.158.136.0/22162.158.140.0/24162.158.141.0/24162.158.142.0/24162.158.144.0/24162.158.145.0/24162.158.146.0/24162.158.147.0/24162.158.148.0/22162.158.152.0/22162.158.156.0/22162.158.160.0/20162.158.176.0/24162.158.177.0/24162.158.178.0/24162.158.179.0/24162.158.180.0/22162.158.184.0/24162.158.185.0/24162.158.186.0/24162.158.187.0/24162.158.188.0/24162.158.189.0/24162.158.190.0/24162.158.192.0/24162.158.193.0/24162.158.194.0/24162.158.195.0/24162.158.196.0/24162.158.197.0/24162.158.200.0/22162.158.204.0/23162.158.206.0/23162.158.206.0/24162.158.208.0/22162.158.212.0/22162.158.216.0/23162.158.218.0/23162.158.220.0/22162.158.224.0/24162.158.225.0/24162.158.226.0/23162.158.228.0/22162.158.232.0/22162.158.236.0/22162.158.240.0/22162.158.244.0/22162.158.248.0/23162.158.250.0/23162.158.252.0/22162.159.0.0/20162.159.0.0/24162.159.1.0/24162.159.2.0/24162.159.3.0/24162.159.4.0/24162.159.5.0/24162.159.6.0/24162.159.7.0/24162.159.8.0/24162.159.9.0/24162.159.10.0/24162.159.11.0/24162.159.12.0/24162.159.13.0/24162.159.14.0/24162.159.15.0/24162.159.16.0/20162.159.16.0/24162.159.17.0/24162.159.18.0/24162.159.19.0/24162.159.20.0/24162.159.21.0/24162.159.22.0/24162.159.23.0/24162.159.24.0/24162.159.25.0/24162.159.26.0/24162.159.27.0/24162.159.28.0/24162.159.29.0/24162.159.30.0/24162.159.31.0/24162.159.32.0/20162.159.32.0/23162.159.34.0/23162.159.36.0/24162.159.40.0/23162.159.42.0/23162.159.46.0/24162.159.128.0/17162.159.128.0/19162.159.132.0/24162.159.192.0/22162.159.200.0/24162.159.208.0/22162.159.212.0/22162.159.216.0/21162.159.224.0/20162.251.82.0/24172.64.0.0/20172.64.0.0/16172.64.16.0/20172.64.32.0/20172.64.48.0/20172.64.64.0/20172.64.96.0/20172.64.112.0/20172.64.128.0/20172.64.144.0/20172.64.160.0/20172.64.176.0/20172.64.192.0/20172.64.208.0/20172.65.0.0/20172.65.16.0/20172.65.32.0/20172.65.48.0/20172.65.64.0/20172.65.80.0/20172.65.96.0/20172.65.112.0/20172.65.128.0/20172.65.144.0/20172.65.160.0/20172.65.176.0/20172.65.192.0/20172.65.208.0/20172.65.224.0/20172.65.240.0/20172.68.0.0/22172.68.4.0/22172.68.8.0/22172.68.12.0/22172.68.16.0/21172.68.24.0/22172.68.28.0/24172.68.29.0/24172.68.30.0/24172.68.31.0/24172.68.32.0/22172.68.36.0/22172.68.40.0/22172.68.44.0/22172.68.48.0/22172.68.52.0/22172.68.56.0/24172.68.57.0/24172.68.58.0/24172.68.59.0/24172.68.60.0/22172.68.64.0/22172.68.68.0/22172.68.72.0/22172.68.76.0/22172.68.80.0/22172.68.84.0/22172.68.88.0/22172.68.92.0/22172.68.96.0/22172.68.100.0/22172.68.104.0/22172.68.108.0/22172.68.112.0/22172.68.116.0/22172.68.120.0/23172.68.124.0/22172.68.128.0/22172.68.132.0/22172.68.136.0/22172.68.140.0/22172.68.144.0/22172.68.148.0/22172.68.152.0/22172.68.160.0/22172.68.164.0/23172.68.166.0/23172.68.168.0/23172.68.170.0/24172.68.171.0/24172.68.172.0/22172.68.176.0/22172.68.180.0/22172.68.184.0/22172.68.188.0/22172.68.196.0/22172.68.200.0/22172.68.204.0/22172.68.208.0/22172.68.212.0/22172.68.216.0/22172.68.220.0/22172.68.224.0/22172.68.228.0/22172.68.232.0/22172.68.236.0/22172.68.240.0/22172.68.244.0/22172.68.248.0/21172.69.0.0/23172.69.2.0/24172.69.3.0/24172.69.4.0/22172.69.8.0/22172.69.12.0/24172.69.16.0/21172.69.32.0/22172.69.36.0/23172.69.38.0/23172.69.40.0/22172.69.44.0/24172.69.45.0/24172.69.46.0/24172.69.47.0/24172.69.48.0/22172.69.52.0/22172.69.56.0/22172.69.60.0/22172.69.64.0/21172.69.72.0/22172.69.76.0/22172.69.80.0/22172.69.84.0/22172.69.88.0/22172.69.92.0/22172.69.96.0/22172.69.100.0/22172.69.104.0/22172.69.108.0/23172.69.110.0/24172.69.111.0/24172.69.112.0/22172.69.116.0/22172.69.120.0/22172.69.124.0/22172.69.128.0/22172.69.132.0/22172.69.136.0/22172.69.140.0/22172.69.144.0/22172.69.148.0/22172.69.152.0/22172.69.156.0/22172.69.160.0/24172.69.164.0/22172.69.168.0/22172.69.172.0/22172.69.176.0/22172.69.180.0/22172.69.184.0/22172.69.188.0/22172.69.192.0/22172.69.196.0/22172.69.200.0/22172.69.204.0/22172.69.208.0/22172.69.212.0/22172.69.216.0/22172.69.220.0/22172.69.224.0/23172.69.226.0/23172.69.228.0/22172.69.232.0/23172.69.234.0/24172.69.235.0/24172.69.236.0/22172.69.240.0/22172.69.244.0/23172.69.246.0/23172.69.248.0/22172.69.252.0/24172.69.253.0/24172.69.254.0/24172.69.255.0/24173.245.48.0/24173.245.49.0/24173.245.52.0/24173.245.54.0/24173.245.58.0/24173.245.59.0/24173.245.62.0/24173.245.63.0/24188.114.96.0/24188.114.97.0/24188.114.98.0/24188.114.99.0/24188.114.100.0/24188.114.101.0/24188.114.102.0/24188.114.103.0/24188.114.104.0/24188.114.106.0/23188.114.108.0/24188.114.109.0/24188.114.110.0/24188.114.111.0/24190.93.240.0/20190.93.244.0/22197.234.240.0/24197.234.240.0/22197.234.241.0/24197.234.242.0/24198.41.192.0/21198.41.200.0/21198.41.208.0/23198.41.212.0/24198.41.213.0/24198.41.214.0/23198.41.220.0/23198.41.222.0/24198.41.223.0/24198.41.224.0/22198.41.228.0/22198.41.232.0/23198.41.235.0/24198.41.236.0/22198.41.240.0/24198.41.241.0/24198.41.242.0/24198.217.251.0/24199.21.96.0/22199.27.132.0/241.0.0.1-1.0.0.2541.1.1.1-1.1.1.2548.6.112.1-8.6.112.2548.6.144.1-8.6.144.2548.6.145.1-8.6.145.2548.6.146.1-8.6.146.2548.9.230.1-8.9.230.2548.9.231.1-8.9.231.2548.10.148.1-8.10.148.2548.14.199.1-8.14.199.2548.14.201.1-8.14.201.2548.14.202.1-8.14.202.2548.14.203.1-8.14.203.2548.14.204.1-8.14.204.2548.17.205.1-8.17.205.2548.18.50.1-8.18.50.2548.18.194.1-8.18.194.2548.21.8.1-8.21.8.2548.35.57.1-8.35.57.2548.35.58.1-8.35.58.2548.35.59.1-8.35.59.2548.36.216.1-8.36.216.2548.36.217.1-8.36.217.2548.36.218.1-8.36.218.2548.36.219.1-8.36.219.2548.36.220.1-8.36.220.2548.37.41.1-8.37.41.2548.37.43.1-8.37.43.2548.38.147.1-8.38.147.2548.38.148.1-8.38.148.2548.38.149.1-8.38.149.2548.38.172.1-8.38.172.2548.39.6.1-8.39.6.2548.39.18.1-8.39.18.2548.39.125.1-8.39.125.2548.39.126.1-8.39.126.2548.39.127.1-8.39.127.2548.39.201.1-8.39.201.2548.39.202.1-8.39.202.2548.39.203.1-8.39.203.2548.39.204.1-8.39.204.2548.39.205.1-8.39.205.2548.39.206.1-8.39.206.2548.39.207.1-8.39.207.2548.39.212.1-8.39.212.2548.39.213.1-8.39.213.2548.39.214.1-8.39.214.2548.39.215.1-8.39.215.2548.40.26.1-8.40.26.2548.40.27.1-8.40.27.2548.40.28.1-8.40.28.2548.40.29.1-8.40.29.2548.40.30.1-8.40.30.2548.40.31.1-8.40.31.2548.40.107.1-8.40.107.2548.40.111.1-8.40.111.2548.40.140.1-8.40.140.2548.41.5.1-8.41.5.2548.41.6.1-8.41.6.2548.41.7.1-8.41.7.2548.41.36.1-8.41.36.2548.41.37.1-8.41.37.2548.41.39.1-8.41.39.2548.42.51.1-8.42.51.2548.42.52.1-8.42.52.2548.42.54.1-8.42.54.2548.42.55.1-8.42.55.2548.42.161.1-8.42.161.2548.42.164.1-8.42.164.2548.42.172.1-8.42.172.2548.42.245.1-8.42.245.2548.43.121.1-8.43.121.2548.43.122.1-8.43.122.2548.43.123.1-8.43.123.2548.43.224.1-8.43.224.2548.43.225.1-8.43.225.2548.43.226.1-8.43.226.2548.44.0.1-8.44.0.2548.44.1.1-8.44.1.2548.44.2.1-8.44.2.2548.44.3.1-8.44.3.2548.44.6.1-8.44.6.2548.44.58.1-8.44.58.2548.44.59.1-8.44.59.2548.44.60.1-8.44.60.2548.44.61.1-8.44.61.2548.44.62.1-8.44.62.2548.44.63.1-8.44.63.2548.45.41.1-8.45.41.2548.45.42.1-8.45.42.2548.45.43.1-8.45.43.2548.45.44.1-8.45.44.2548.45.45.1-8.45.45.2548.45.46.1-8.45.46.2548.45.47.1-8.45.47.2548.45.97.1-8.45.97.2548.45.100.1-8.45.100.2548.45.101.1-8.45.101.2548.45.102.1-8.45.102.2548.45.108.1-8.45.108.2548.45.111.1-8.45.111.2548.45.144.1-8.45.144.2548.45.145.1-8.45.145.2548.45.146.1-8.45.146.2548.45.147.1-8.45.147.2548.45.151.1-8.45.151.2548.46.113.1-8.46.113.2548.46.114.1-8.46.114.2548.46.115.1-8.46.115.2548.46.116.1-8.46.116.2548.46.117.1-8.46.117.2548.46.118.1-8.46.118.2548.46.119.1-8.46.119.2548.47.9.1-8.47.9.2548.47.12.1-8.47.12.2548.47.13.1-8.47.13.2548.47.14.1-8.47.14.2548.47.15.1-8.47.15.2548.47.69.1-8.47.69.2548.47.71.1-8.47.71.2548.48.130.1-8.48.130.2548.48.132.1-8.48.132.2548.48.133.1-8.48.133.2548.48.134.1-8.48.134.25423.227.38.1-23.227.39.25423.227.62.1-23.227.63.25464.68.192.1-64.68.192.25466.235.200.1-66.235.200.254103.22.200.1-103.22.201.254103.22.203.1-103.22.203.254103.31.4.1-103.31.5.254104.16.0.1-104.16.15.254104.16.0.1-104.31.255.254104.16.16.1-104.16.31.254104.16.32.1-104.16.47.254104.16.48.1-104.16.63.254104.16.64.1-104.16.79.254104.16.80.1-104.16.95.254104.16.96.1-104.16.111.254104.16.112.1-104.16.127.254104.16.128.1-104.16.143.254104.16.144.1-104.16.159.254104.16.160.1-104.16.175.254104.16.176.1-104.16.191.254104.16.192.1-104.16.207.254104.16.208.1-104.16.223.254104.16.224.1-104.16.239.254104.16.240.1-104.16.255.254104.17.0.1-104.17.15.254104.17.16.1-104.17.31.254104.17.32.1-104.17.47.254104.17.48.1-104.17.63.254104.17.64.1-104.17.79.254104.17.80.1-104.17.95.254104.17.96.1-104.17.111.254104.17.112.1-104.17.127.254104.17.128.1-104.17.143.254104.17.144.1-104.17.159.254104.17.160.1-104.17.175.254104.17.176.1-104.17.191.254104.17.192.1-104.17.207.254104.17.208.1-104.17.223.254104.17.224.1-104.17.239.254104.17.240.1-104.17.255.254104.18.0.1-104.18.15.254104.18.16.1-104.18.31.254104.18.32.1-104.18.47.254104.18.48.1-104.18.63.254104.18.64.1-104.18.79.254104.18.80.1-104.18.95.254104.18.96.1-104.18.111.254104.18.112.1-104.18.127.254104.18.128.1-104.18.143.254104.18.144.1-104.18.159.254104.18.160.1-104.18.175.254104.18.176.1-104.18.191.254104.18.192.1-104.18.207.254104.18.208.1-104.18.223.254104.18.224.1-104.18.239.254104.18.240.1-104.18.255.254104.19.0.1-104.19.15.254104.19.16.1-104.19.31.254104.19.32.1-104.19.47.254104.19.48.1-104.19.63.254104.19.64.1-104.19.79.254104.19.80.1-104.19.95.254104.19.96.1-104.19.111.254104.19.112.1-104.19.127.254104.19.128.1-104.19.143.254104.19.144.1-104.19.159.254104.19.160.1-104.19.175.254104.19.176.1-104.19.191.254104.19.192.1-104.19.207.254104.19.208.1-104.19.223.254104.19.224.1-104.19.239.254104.19.240.1-104.19.255.254104.20.0.1-104.20.15.254104.20.16.1-104.20.31.254104.20.32.1-104.20.47.254104.20.48.1-104.20.63.254104.20.64.1-104.20.79.254104.20.80.1-104.20.95.254104.20.96.1-104.20.111.254104.20.112.1-104.20.127.254104.20.128.1-104.20.143.254104.20.144.1-104.20.159.254104.20.160.1-104.20.175.254104.20.176.1-104.20.191.254104.20.192.1-104.20.207.254104.20.208.1-104.20.223.254104.20.224.1-104.20.239.254104.20.240.1-104.20.255.254104.22.0.1-104.22.15.254104.23.96.1-104.23.111.254104.23.112.1-104.23.127.254104.23.128.1-104.23.143.254104.23.192.1-104.23.207.254104.23.240.1-104.23.243.254104.24.0.1-104.24.15.254104.24.16.1-104.24.31.254104.24.32.1-104.24.47.254104.24.48.1-104.24.63.254104.24.64.1-104.24.79.254104.24.80.1-104.24.95.254104.24.96.1-104.24.111.254104.24.112.1-104.24.127.254104.24.128.1-104.24.143.254104.24.144.1-104.24.159.254104.24.160.1-104.24.175.254104.24.176.1-104.24.191.254104.24.192.1-104.24.207.254104.24.208.1-104.24.223.254104.24.224.1-104.24.239.254104.24.240.1-104.24.255.254104.25.0.1-104.25.15.254104.25.16.1-104.25.31.254104.25.32.1-104.25.47.254104.25.48.1-104.25.63.254104.25.64.1-104.25.79.254104.25.80.1-104.25.95.254104.25.96.1-104.25.111.254104.25.112.1-104.25.127.254104.25.128.1-104.25.143.254104.25.144.1-104.25.159.254104.25.160.1-104.25.175.254104.25.176.1-104.25.191.254104.25.192.1-104.25.207.254104.25.208.1-104.25.223.254104.25.224.1-104.25.239.254104.25.240.1-104.25.255.254104.26.0.1-104.26.15.254104.27.0.1-104.27.15.254104.27.16.1-104.27.31.254104.27.32.1-104.27.47.254104.27.48.1-104.27.63.254104.27.64.1-104.27.79.254104.27.80.1-104.27.95.254104.27.96.1-104.27.111.254104.27.112.1-104.27.127.254104.27.128.1-104.27.143.254104.27.144.1-104.27.159.254104.27.160.1-104.27.175.254104.27.176.1-104.27.191.254104.27.192.1-104.27.207.254104.27.208.1-104.27.223.254104.27.240.1-104.27.243.254104.28.0.1-104.28.15.254104.28.16.1-104.28.31.254104.28.32.1-104.28.47.254104.28.48.1-104.28.63.254104.28.64.1-104.28.79.254104.28.80.1-104.28.95.254104.28.96.1-104.28.111.254104.28.112.1-104.28.127.254104.28.128.1-104.28.143.254104.28.144.1-104.28.159.254104.28.160.1-104.28.175.254104.28.176.1-104.28.191.254104.28.192.1-104.28.207.254104.28.208.1-104.28.223.254104.28.224.1-104.28.239.254104.28.240.1-104.28.255.254104.31.0.1-104.31.15.254104.31.16.1-104.31.31.254104.31.64.1-104.31.79.254104.31.80.1-104.31.95.254104.31.112.1-104.31.115.254104.31.128.1-104.31.143.254104.31.144.1-104.31.159.254104.31.160.1-104.31.175.254104.31.176.1-104.31.191.254104.31.192.1-104.31.207.254104.31.208.1-104.31.223.254104.31.224.1-104.31.239.254104.31.240.1-104.31.255.254108.162.208.1-108.162.208.254108.162.210.1-108.162.210.254108.162.211.1-108.162.211.254108.162.212.1-108.162.212.254108.162.213.1-108.162.213.254108.162.214.1-108.162.214.254108.162.215.1-108.162.215.254108.162.216.1-108.162.216.254108.162.217.1-108.162.217.254108.162.218.1-108.162.218.254108.162.219.1-108.162.219.254108.162.220.1-108.162.220.254108.162.221.1-108.162.221.254108.162.223.1-108.162.223.254108.162.226.1-108.162.226.254108.162.227.1-108.162.227.254108.162.228.1-108.162.228.254108.162.229.1-108.162.229.254108.162.235.1-108.162.235.254108.162.236.1-108.162.236.254108.162.237.1-108.162.237.254108.162.238.1-108.162.238.254108.162.239.1-108.162.239.254108.162.240.1-108.162.240.254108.162.241.1-108.162.241.254108.162.242.1-108.162.242.254108.162.243.1-108.162.243.254108.162.244.1-108.162.244.254108.162.245.1-108.162.245.254108.162.246.1-108.162.246.254108.162.247.1-108.162.247.254108.162.248.1-108.162.248.254108.162.249.1-108.162.249.254108.162.250.1-108.162.250.254108.162.252.1-108.162.252.254108.162.253.1-108.162.253.254141.101.64.1-141.101.64.254141.101.65.1-141.101.65.254141.101.66.1-141.101.66.254141.101.67.1-141.101.67.254141.101.68.1-141.101.68.254141.101.69.1-141.101.69.254141.101.70.1-141.101.70.254141.101.71.1-141.101.71.254141.101.72.1-141.101.72.254141.101.73.1-141.101.73.254141.101.74.1-141.101.74.254141.101.75.1-141.101.75.254141.101.76.1-141.101.77.254141.101.82.1-141.101.82.254141.101.83.1-141.101.83.254141.101.84.1-141.101.84.254141.101.85.1-141.101.85.254141.101.88.1-141.101.91.254141.101.94.1-141.101.94.254141.101.95.1-141.101.95.254141.101.96.1-141.101.96.254141.101.97.1-141.101.97.254141.101.98.1-141.101.98.254141.101.99.1-141.101.99.254141.101.100.1-141.101.103.254141.101.104.1-141.101.104.254141.101.105.1-141.101.105.254141.101.106.1-141.101.106.254141.101.107.1-141.101.107.254141.101.108.1-141.101.108.254141.101.109.1-141.101.109.254141.101.110.1-141.101.110.254141.101.112.1-141.101.127.254141.101.112.1-141.101.113.254141.101.114.1-141.101.115.254141.101.120.1-141.101.123.254162.158.0.1-162.158.3.254162.158.4.1-162.158.7.254162.158.8.1-162.158.8.254162.158.9.1-162.158.9.254162.158.10.1-162.158.10.254162.158.11.1-162.158.11.254162.158.12.1-162.158.15.254162.158.16.1-162.158.19.254162.158.20.1-162.158.23.254162.158.24.1-162.158.25.254162.158.24.1-162.158.24.254162.158.25.1-162.158.25.254162.158.26.1-162.158.26.254162.158.27.1-162.158.27.254162.158.28.1-162.158.28.254162.158.29.1-162.158.29.254162.158.30.1-162.158.30.254162.158.32.1-162.158.35.254162.158.36.1-162.158.36.254162.158.37.1-162.158.37.254162.158.38.1-162.158.38.254162.158.39.1-162.158.39.254162.158.40.1-162.158.40.254162.158.41.1-162.158.41.254162.158.42.1-162.158.42.254162.158.44.1-162.158.47.254162.158.48.1-162.158.48.254162.158.49.1-162.158.49.254162.158.50.1-162.158.50.254162.158.52.1-162.158.55.254162.158.52.1-162.158.52.254162.158.53.1-162.158.53.254162.158.54.1-162.158.54.254162.158.55.1-162.158.55.254162.158.56.1-162.158.59.254162.158.60.1-162.158.63.254162.158.72.1-162.158.75.254162.158.76.1-162.158.79.254162.158.80.1-162.158.81.254162.158.82.1-162.158.83.254162.158.84.1-162.158.87.254162.158.88.1-162.158.95.254162.158.96.1-162.158.96.254162.158.97.1-162.158.97.254162.158.98.1-162.158.98.254162.158.99.1-162.158.99.254162.158.100.1-162.158.100.254162.158.101.1-162.158.101.254162.158.102.1-162.158.102.254162.158.103.1-162.158.103.254162.158.104.1-162.158.104.254162.158.105.1-162.158.105.254162.158.106.1-162.158.106.254162.158.107.1-162.158.107.254162.158.108.1-162.158.111.254162.158.112.1-162.158.112.254162.158.113.1-162.158.113.254162.158.114.1-162.158.114.254162.158.116.1-162.158.119.254162.158.120.1-162.158.120.254162.158.121.1-162.158.121.254162.158.122.1-162.158.122.254162.158.123.1-162.158.123.254162.158.124.1-162.158.127.254162.158.128.1-162.158.131.254162.158.132.1-162.158.132.254162.158.133.1-162.158.133.254162.158.134.1-162.158.134.254162.158.136.1-162.158.139.254162.158.140.1-162.158.140.254162.158.141.1-162.158.141.254162.158.142.1-162.158.142.254162.158.144.1-162.158.144.254162.158.145.1-162.158.145.254162.158.146.1-162.158.146.254162.158.147.1-162.158.147.254162.158.148.1-162.158.151.254162.158.152.1-162.158.155.254162.158.156.1-162.158.159.254162.158.160.1-162.158.175.254162.158.176.1-162.158.176.254162.158.177.1-162.158.177.254162.158.178.1-162.158.178.254162.158.179.1-162.158.179.254162.158.180.1-162.158.183.254162.158.184.1-162.158.184.254162.158.185.1-162.158.185.254162.158.186.1-162.158.186.254162.158.187.1-162.158.187.254162.158.188.1-162.158.188.254162.158.189.1-162.158.189.254162.158.190.1-162.158.190.254162.158.192.1-162.158.192.254162.158.193.1-162.158.193.254162.158.194.1-162.158.194.254162.158.195.1-162.158.195.254162.158.196.1-162.158.196.254162.158.197.1-162.158.197.254162.158.200.1-162.158.203.254162.158.204.1-162.158.205.254162.158.206.1-162.158.207.254162.158.206.1-162.158.206.254162.158.208.1-162.158.211.254162.158.212.1-162.158.215.254162.158.216.1-162.158.217.254162.158.218.1-162.158.219.254162.158.220.1-162.158.223.254162.158.224.1-162.158.224.254162.158.225.1-162.158.225.254162.158.226.1-162.158.227.254162.158.228.1-162.158.231.254162.158.232.1-162.158.235.254162.158.236.1-162.158.239.254162.158.240.1-162.158.243.254162.158.244.1-162.158.247.254162.158.248.1-162.158.249.254162.158.250.1-162.158.251.254162.158.252.1-162.158.255.254162.159.0.1-162.159.15.254162.159.0.1-162.159.0.254162.159.1.1-162.159.1.254162.159.2.1-162.159.2.254162.159.3.1-162.159.3.254162.159.4.1-162.159.4.254162.159.5.1-162.159.5.254162.159.6.1-162.159.6.254162.159.7.1-162.159.7.254162.159.8.1-162.159.8.254162.159.9.1-162.159.9.254162.159.10.1-162.159.10.254162.159.11.1-162.159.11.254162.159.12.1-162.159.12.254162.159.13.1-162.159.13.254162.159.14.1-162.159.14.254162.159.15.1-162.159.15.254162.159.16.1-162.159.31.254162.159.16.1-162.159.16.254162.159.17.1-162.159.17.254162.159.18.1-162.159.18.254162.159.19.1-162.159.19.254162.159.20.1-162.159.20.254162.159.21.1-162.159.21.254162.159.22.1-162.159.22.254162.159.23.1-162.159.23.254162.159.24.1-162.159.24.254162.159.25.1-162.159.25.254162.159.26.1-162.159.26.254162.159.27.1-162.159.27.254162.159.28.1-162.159.28.254162.159.29.1-162.159.29.254162.159.30.1-162.159.30.254162.159.31.1-162.159.31.254162.159.32.1-162.159.47.254162.159.32.1-162.159.33.254162.159.34.1-162.159.35.254162.159.36.1-162.159.36.254162.159.40.1-162.159.41.254162.159.42.1-162.159.43.254162.159.46.1-162.159.46.254162.159.128.1-162.159.255.254162.159.128.1-162.159.159.254162.159.132.1-162.159.132.254162.159.192.1-162.159.195.254162.159.200.1-162.159.200.254162.159.208.1-162.159.211.254162.159.212.1-162.159.215.254162.159.216.1-162.159.223.254162.159.224.1-162.159.239.254162.251.82.1-162.251.82.254172.64.0.1-172.64.15.254172.64.0.1-172.64.255.254172.64.16.1-172.64.31.254172.64.32.1-172.64.47.254172.64.48.1-172.64.63.254172.64.64.1-172.64.79.254172.64.96.1-172.64.111.254172.64.112.1-172.64.127.254172.64.128.1-172.64.143.254172.64.144.1-172.64.159.254172.64.160.1-172.64.175.254172.64.176.1-172.64.191.254172.64.192.1-172.64.207.254172.64.208.1-172.64.223.254172.65.0.1-172.65.15.254172.65.16.1-172.65.31.254172.65.32.1-172.65.47.254172.65.48.1-172.65.63.254172.65.64.1-172.65.79.254172.65.80.1-172.65.95.254172.65.96.1-172.65.111.254172.65.112.1-172.65.127.254172.65.128.1-172.65.143.254172.65.144.1-172.65.159.254172.65.160.1-172.65.175.254172.65.176.1-172.65.191.254172.65.192.1-172.65.207.254172.65.208.1-172.65.223.254172.65.224.1-172.65.239.254172.65.240.1-172.65.255.254172.68.0.1-172.68.3.254172.68.4.1-172.68.7.254172.68.8.1-172.68.11.254172.68.12.1-172.68.15.254172.68.16.1-172.68.23.254172.68.24.1-172.68.27.254172.68.28.1-172.68.28.254172.68.29.1-172.68.29.254172.68.30.1-172.68.30.254172.68.31.1-172.68.31.254172.68.32.1-172.68.35.254172.68.36.1-172.68.39.254172.68.40.1-172.68.43.254172.68.44.1-172.68.47.254172.68.48.1-172.68.51.254172.68.52.1-172.68.55.254172.68.56.1-172.68.56.254172.68.57.1-172.68.57.254172.68.58.1-172.68.58.254172.68.59.1-172.68.59.254172.68.60.1-172.68.63.254172.68.64.1-172.68.67.254172.68.68.1-172.68.71.254172.68.72.1-172.68.75.254172.68.76.1-172.68.79.254172.68.80.1-172.68.83.254172.68.84.1-172.68.87.254172.68.88.1-172.68.91.254172.68.92.1-172.68.95.254172.68.96.1-172.68.99.254172.68.100.1-172.68.103.254172.68.104.1-172.68.107.254172.68.108.1-172.68.111.254172.68.112.1-172.68.115.254172.68.116.1-172.68.119.254172.68.120.1-172.68.121.254172.68.124.1-172.68.127.254172.68.128.1-172.68.131.254172.68.132.1-172.68.135.254172.68.136.1-172.68.139.254172.68.140.1-172.68.143.254172.68.144.1-172.68.147.254172.68.148.1-172.68.151.254172.68.152.1-172.68.155.254172.68.160.1-172.68.163.254172.68.164.1-172.68.165.254172.68.166.1-172.68.167.254172.68.168.1-172.68.169.254172.68.170.1-172.68.170.254172.68.171.1-172.68.171.254172.68.172.1-172.68.175.254172.68.176.1-172.68.179.254172.68.180.1-172.68.183.254172.68.184.1-172.68.187.254172.68.188.1-172.68.191.254172.68.196.1-172.68.199.254172.68.200.1-172.68.203.254172.68.204.1-172.68.207.254172.68.208.1-172.68.211.254172.68.212.1-172.68.215.254172.68.216.1-172.68.219.254172.68.220.1-172.68.223.254172.68.224.1-172.68.227.254172.68.228.1-172.68.231.254172.68.232.1-172.68.235.254172.68.236.1-172.68.239.254172.68.240.1-172.68.243.254172.68.244.1-172.68.247.254172.68.248.1-172.68.255.254172.69.0.1-172.69.1.254172.69.2.1-172.69.2.254172.69.3.1-172.69.3.254172.69.4.1-172.69.7.254172.69.8.1-172.69.11.254172.69.12.1-172.69.12.254172.69.16.1-172.69.23.254172.69.32.1-172.69.35.254172.69.36.1-172.69.37.254172.69.38.1-172.69.39.254172.69.40.1-172.69.43.254172.69.44.1-172.69.44.254172.69.45.1-172.69.45.254172.69.46.1-172.69.46.254172.69.47.1-172.69.47.254172.69.48.1-172.69.51.254172.69.52.1-172.69.55.254172.69.56.1-172.69.59.254172.69.60.1-172.69.63.254172.69.64.1-172.69.71.254172.69.72.1-172.69.75.254172.69.76.1-172.69.79.254172.69.80.1-172.69.83.254172.69.84.1-172.69.87.254172.69.88.1-172.69.91.254172.69.92.1-172.69.95.254172.69.96.1-172.69.99.254172.69.100.1-172.69.103.254172.69.104.1-172.69.107.254172.69.108.1-172.69.109.254172.69.110.1-172.69.110.254172.69.111.1-172.69.111.254172.69.112.1-172.69.115.254172.69.116.1-172.69.119.254172.69.120.1-172.69.123.254172.69.124.1-172.69.127.254172.69.128.1-172.69.131.254172.69.132.1-172.69.135.254172.69.136.1-172.69.139.254172.69.140.1-172.69.143.254172.69.144.1-172.69.147.254172.69.148.1-172.69.151.254172.69.152.1-172.69.155.254172.69.156.1-172.69.159.254172.69.160.1-172.69.160.254172.69.164.1-172.69.167.254172.69.168.1-172.69.171.254172.69.172.1-172.69.175.254172.69.176.1-172.69.179.254172.69.180.1-172.69.183.254172.69.184.1-172.69.187.254172.69.188.1-172.69.191.254172.69.192.1-172.69.195.254172.69.196.1-172.69.199.254172.69.200.1-172.69.203.254172.69.204.1-172.69.207.254172.69.208.1-172.69.211.254172.69.212.1-172.69.215.254172.69.216.1-172.69.219.254172.69.220.1-172.69.223.254172.69.224.1-172.69.225.254172.69.226.1-172.69.227.254172.69.228.1-172.69.231.254172.69.232.1-172.69.233.254172.69.234.1-172.69.234.254172.69.235.1-172.69.235.254172.69.236.1-172.69.239.254172.69.240.1-172.69.243.254172.69.244.1-172.69.245.254172.69.246.1-172.69.247.254172.69.248.1-172.69.251.254172.69.252.1-172.69.252.254172.69.253.1-172.69.253.254172.69.254.1-172.69.254.254172.69.255.1-172.69.255.254173.245.48.1-173.245.48.254173.245.49.1-173.245.49.254173.245.52.1-173.245.52.254173.245.54.1-173.245.54.254173.245.58.1-173.245.58.254173.245.59.1-173.245.59.254173.245.62.1-173.245.62.254173.245.63.1-173.245.63.254188.114.96.1-188.114.96.254188.114.97.1-188.114.97.254188.114.98.1-188.114.98.254188.114.99.1-188.114.99.254188.114.100.1-188.114.100.254188.114.101.1-188.114.101.254188.114.102.1-188.114.102.254188.114.103.1-188.114.103.254188.114.104.1-188.114.104.254188.114.106.1-188.114.107.254188.114.108.1-188.114.108.254188.114.109.1-188.114.109.254188.114.110.1-188.114.110.254188.114.111.1-188.114.111.254190.93.240.1-190.93.255.254190.93.244.1-190.93.247.254197.234.240.1-197.234.240.254197.234.240.1-197.234.243.254197.234.241.1-197.234.241.254197.234.242.1-197.234.242.254198.41.192.1-198.41.199.254198.41.200.1-198.41.207.254198.41.208.1-198.41.209.254198.41.212.1-198.41.212.254198.41.213.1-198.41.213.254198.41.214.1-198.41.215.254198.41.220.1-198.41.221.254198.41.222.1-198.41.222.254198.41.223.1-198.41.223.254198.41.224.1-198.41.227.254198.41.228.1-198.41.231.254198.41.232.1-198.41.233.254198.41.235.1-198.41.235.254198.41.236.1-198.41.239.254198.41.240.1-198.41.240.254198.41.241.1-198.41.241.254198.41.242.1-198.41.242.254198.217.251.1-198.217.251.254199.21.96.1-199.21.99.254199.27.132.1-199.27.132.254","link":"/2019/12/cf.html/"}],"tags":[{"name":"Tool","slug":"Tool","link":"/tags/Tool/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Tutorial","slug":"Tutorial","link":"/tags/Tutorial/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Gossip","slug":"Gossip","link":"/tags/Gossip/"},{"name":"WSL","slug":"WSL","link":"/tags/WSL/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"interview","slug":"interview","link":"/tags/interview/"}],"categories":[{"name":"Tool","slug":"Tool","link":"/categories/Tool/"},{"name":"Tutorial","slug":"Tutorial","link":"/categories/Tutorial/"},{"name":"Gossip","slug":"Gossip","link":"/categories/Gossip/"},{"name":"Blog","slug":"Tutorial/Blog","link":"/categories/Tutorial/Blog/"},{"name":"WSL","slug":"Tutorial/WSL","link":"/categories/Tutorial/WSL/"},{"name":"interview","slug":"interview","link":"/categories/interview/"}]}